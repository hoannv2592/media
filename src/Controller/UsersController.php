<?php

namespace App\Controller;

use App\Controller\AppController;
use Cake\Datasource\ConnectionManager;
use App\Model\Entity\User;
use Cake\Event\Event;
use Cake\ORM\TableRegistry;
use Cake\Utility\Hash;
use DateTime;
use function MongoDB\BSON\toJSON;
use PHPExcel;
use PHPExcel_IOFactory;
use PHPExcel_Style_Border;
use PHPExcel_Cell;
use PHPExcel_Style_Fill;
use Cake\Validation\Validator;
use Cake\Auth\DefaultPasswordHasher;
use Cake\Controller\Component\FlashComponent;

/**
 * Users Controller
 *
 * @property \App\Model\Table\UsersTable $Users
 *
 * @method \App\Model\Entity\User[] paginate($object = null, array $settings = [])
 *
 * @property  \App\Controller\Component\PhpExcelComponent $PhpExcel
 * @property \App\Model\Table\PartnersTable $Partners
 * @property \App\Model\Table\PartnerVouchersTable $PartnerVouchers
 */
class UsersController extends AppController
{

    public function initialize()
    {
        $this->loadModel('PartnerVouchers');
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $login = $this->Auth->user();
        if ($login['role'] == User::ROLE_ONE) {
            $users = $this->Users->find('all', [
                'contain' => ['Devices' => function ($q) {
                    return $q
                        ->where([
                            'Devices.delete_flag !=' => 1
                        ])
                        ->select([
                            'Devices.user_id', 'id', 'name'
                        ]);
                }],
                'conditions' => [
                    'Users.delete_flag !=' => 1
                ]
            ]);
        } else {
            $users = $this->Users->find('all', [
                'contain' => ['Devices' => function ($q) {
                    return $q
                        ->where([
                            'Devices.delete_flag !=' => 1,
                        ])
                        ->select([
                            'Devices.user_id', 'id', 'name'
                        ]);
                }],
                'conditions' => [
                    'Users.id' => $login['id'],
                    'Users.delete_flag !=' => 1,
                ]
            ]);
        }
        $users = $this->paginate($users, ['limit' => 10, 'order' => [
            'Users.created' => 'DESC']
        ])
            ->toArray();
        $this->set(compact('users'));

    }

    /**
     * View method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $user = $this->Users->get($id, [
            'contain' => []
        ]);

        $this->set('user', $user);
        $this->set('_serialize', ['user']);
    }

    /**
     * Add detailPartner method
     * get an infomation partner
     *
     *
     * @param null $id
     * @return \Cake\Http\Response|null
     */
    public function detailPartner($id = null)
    {
        $id = \UrlUtil::_decodeUrl($id);
        $this->getAllData();
        if (!$this->Users->exists(['id' => $id])) {
            return $this->redirect(['action' => 'index']);
        }
        $user = $this->Users->get($id, [
            'contain' => []
        ]);
        $this->set(compact('user'));
    }


    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $this->getAllData();
        $conn = ConnectionManager::get('default');
        $conn->begin();
        $user = $this->Users->newEntity();
        if ($this->request->is('post')) {
            $user = $this->Users->patchEntity($user, $this->request->getData());
            $user->delete_flag = '0';
            if (empty($user->errors())) {
                if ($this->Users->save($user)) {
                    $conn->commit();
                    $this->Flash->success(__('The user has been saved.'));
                    return $this->redirect(['action' => 'index']);
                } else {
                    $conn->rollback();
                    $this->Flash->error(__('The user could not be saved. Please, try again.'));
                }
            } else {
                $conn->rollback();
                $this->Flash->error(__('The user could not be saved. Please, try again.'));
            }
        }
        $this->set(compact('user'));
        $this->set('_serialize', ['user']);
    }

    /**
     * Edit method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */

    public function edit($id = null)
    {
        $id = \UrlUtil::_decodeUrl($id);
        $conn = ConnectionManager::get('default');
        $conn->begin();
        $this->getAllData();
        if (!$this->Users->exists(['id' => $id])) {
            return $this->redirect(array('controller' => 'Users', 'action' => 'index'));
        }

        $user = $this->Users->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $data = $this->request->getData();
            if ($data['password'] == '') {
                unset($data['password']);
            }
            $user = $this->Users->patchEntity($user, $data);
            if (empty($user->errors())) {
                if ($this->Users->save($user)) {
                    $conn->commit();
                    $this->Flash->success(__('The user has been saved.'));
                    return $this->redirect(['action' => 'index']);
                } else {
                    $conn->rollback();
                    $this->Flash->error(__('The user could not be saved. Please, try again.'));
                    return $this->redirect(['action' => 'edit' . '/' . $id]);
                }
            } else {
                $conn->rollback();
                $this->Flash->error(__('The user could not be saved. Please, try again.'));
                return $this->redirect(['action' => 'edit' . '/' . $id]);
            }
        }
        $this->set(compact('user'));
        $this->set('_serialize', ['user']);
    }

    /**
     * Delete method
     *
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete()
    {
        $this->autoRender = false;
        $conn = ConnectionManager::get('default');
        $conn->begin();
        $this->request->allowMethod(['post', 'delete']);
        if ($this->request->getData()) {
            $user = $this->Users->get($this->request->getData('id'));
            $user->delete_flag = true;
            if (empty($user->errors())) {
                if ($this->Users->save($user)) {
                    $conn->commit();
                    die(json_encode(true));
                } else {
                    $conn->rollback();
                    die(json_encode(false));
                }
            } else {
                $conn->rollback();
                die(json_encode(false));
            }
        }
    }

    /**
     * Login method
     *
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function login()
    {
        $user = $this->Users->newEntity();
        $session = $this->request->session()->read('Users');
        if (!empty($session)) {
            $user = $this->Users->get($session['id']);
            if (!empty($user)) {
                $this->Auth->setUser($user);
                return $this->redirect($this->Auth->redirectUrl());
            }
        }
        if ($this->request->is('post')) {
            $user = $this->Users->newEntity();
            $user = $this->Users->patchEntity($user, $this->request->getData());
            if (empty($user->errors())) {
                $user = $this->Auth->identify();
                if ($user) {
                    if ($user['delete_flag'] != DELETED) {
                        $session = array(
                            'id' => $user['id'],
                            'email' => $this->request->getData()['email'],
                            'password' => $this->request->getData()['password'],
                        );
                        $this->request->session()->write('Users', $session);
                        $this->Auth->setUser($user);
                        return $this->redirect($this->Auth->redirectUrl());
                    } else {
                        $this->Flash->error(__(ERROR_USERS_OR_PASSWORD));
                    }
                } else {
                    $this->Flash->error(__(ERROR_USERS_OR_PASSWORD));
                }
            } else {
                $this->set('errors', $user->errors());
            }
        }
        $this->set(compact('user'));
    }

    /**
     * logout method
     *
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function logout()
    {
        $this->request->session()->delete('Users');
        return $this->redirect($this->Auth->logout());
    }

    /**
     * isEmailExist method
     * check email when add new users
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function isEmailExist()
    {
        $this->autoRender = false;
        if ($this->request->getData()) {
            $query = $this->Users->find('all', array(
                    'recursive' => -1,
                    'conditions' => array(
                        'email' => $this->request->getData('email'),
                        'delete_flag !=' => DELETED
                    ))
            );
            $number = $query->count();
            if (!$number) {
                die(json_encode(true));
            } else {
                die(json_encode(false));
            }
        }
    }

    /**
     * isEmaiEditlExist method
     * check email when edit new users
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function isEmaiEditlExist()
    {
        $this->autoRender = false;
        if ($this->request->getData()) {
            if ($this->request->getData('email') !== $this->request->getData('backup_email')) {
                $query = $this->Users->find('all', array(
                        'recursive' => -1,
                        'conditions' => array(
                            'email' => $this->request->getData('email'),
                            'delete_flag !=' => DELETED
                        ))
                );
                $number = $query->count();
                if (!$number) {
                    die(json_encode(true));
                } else {
                    die(json_encode(false));
                }
            } else {
                die(json_encode(true));
            }
        }
    }

    /**
     * import method
     * check email when edit new users
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */

    public function import()
    {
        $conn = ConnectionManager::get('default');
        $conn->begin();
        if ($this->request->is('post')) {
            $tmpfName = $this->request->data['file_import'];
            $objPHPExcel = $this->PhpExcel->identify($tmpfName['tmp_name']);
            $sheet = $objPHPExcel->setActiveSheetIndex(0);
            $Totalrow = $this->PhpExcel->getTotalRow($sheet);
            $TotalCol = $this->PhpExcel->getTotalColum($sheet);
            $data = [];
            //----Lặp dòng, Vì dòng đầu là tiêu đề cột nên chúng ta sẽ lặp giá trị từ dòng 2
            for ($i = 2; $i <= $Totalrow; $i++) {
                //----Lặp cột
                for ($j = 0; $j < $TotalCol; $j++) {
                    // Tiến hành lấy giá trị của từng ô đổ vào mảng
                    $data[$i - 2][$j] = $sheet->getCellByColumnAndRow($j, $i)->getValue();
                }
            }

            die;
        }
    }

    /**
     *
     */
    public function componentExcel($campaign_id = null)
    {
        if ($campaign_id == '') {
            return $this->redirect(['controller' => 'Reports', 'action' => 'index']);
        }
        $this->autoRender = false;
        $objPHPExcel = $this->PhpExcel->createWorksheet();
        $objPHPExcel->setActiveSheet(0);
        $this->loadModel('Sys_User');
        $conditions = array(
            'campaign_group_id' => $campaign_id
        );
        $partners = $this->PartnerVouchers->find()->where($conditions)
            ->hydrate(false)
            ->select(['name', 'phone', 'address'])
            ->toList();

        if (!empty($partners)) {
            $lable = array();
            $k = 1;
            $lable[0]['label'] = 'No';
            foreach ($partners[0] as $key => $val) {
                $lable[$k + 1]['label'] = $key;
                $k++;
            }

            $headerStyle = array(
                'font' => array(
                    'bold' => true
                )
            );
            $data_label = array();
            foreach ($lable as $k => $vl) {
                if ($k == 0) {
                    $data_label[$k]['label'] = 'No';
                } elseif ($k == 2) {
                    $data_label[$k]['label'] = 'Họ và Tên';
                } elseif ($k == 3) {
                    $data_label[$k]['label'] = 'Số điện thoại';
                } elseif ($k == 4) {
                    $data_label[$k]['label'] = 'Địa chỉ';
                } else {
                    //unset($vl['label']);
                }
            }
            $objPHPExcel->addTableHeader($data_label, array('bold' => true, 'headerStyle' => $headerStyle));
            $objPHPExcel->addTableFooter();
            foreach ($partners as $k => $row) {
                $objPHPExcel->addTableRow($k, $row);
            }
            $fileName = 'data' . '_' . date('Ymd-His') . '.xlsx';
            $objPHPExcel->save($fileName, 'Excel2007');
            $objPHPExcel->output($fileName, 'Excel2007');
        } else {
            $this->redirect('Reports/index');
        }
    }

    /**
     *
     * *********************************************
     * profileUser METHOD
     *
     *
     * @param null $id
     *
     * *********************************************
     */
    public function profileUser($id = null)
    {
        $id = \UrlUtil::_decodeUrl($id);
        $this->getAllData();
        if (!$this->Users->exists(['id' => $id])) {
            $this->redirect(array('controller' => 'Users', 'action' => 'index'));
        }

        $user = $this->Users->get($id, [
            'contain' => []
        ]);
        $this->set(compact('user'));
    }

    /**
     * *********************************************
     * @param null $id
     *
     * @return \Cake\Http\Response|null
     *
     * *********************************************
     */
    public function updateProfile($id = null)
    {
        $id = \UrlUtil::_decodeUrl($id);
        $this->autoRender = false;
        $conn = ConnectionManager::get('default');
        $conn->begin();
        $this->getAllData();
        if (!$this->Users->exists(['id' => $id])) {
            $this->redirect(array('controller' => 'Users', 'action' => 'index'));
        }
        $user = $this->Users->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $user = $this->Users->patchEntity($user, $this->request->getData());
            if (empty($user->errors())) {
                if ($this->Users->save($user)) {
                    $conn->commit();
                    $this->Flash->success(__('The user has been saved.'));
                    return $this->redirect(['action' => 'index']);
                } else {
                    $conn->rollback();
                    $this->Flash->error(__('The user could not be saved. Please, try again.'));
                    return $this->redirect(['action' => 'edit' . '/' . $id]);
                }
            } else {
                $conn->rollback();
                $this->Flash->error(__('The user could not be saved. Please, try again.'));
                return $this->redirect(['action' => 'edit' . '/' . $id]);
            }
        }
        $this->set(compact('user'));
        $this->set('_serialize', ['user']);

    }

    /**
     * *********************************************
     *
     * changePassword method
     *
     * @return \Cake\Http\Response|null
     *
     * *********************************************
     */
    public function changePassword()
    {
        $user = $this->Users->newEntity();
        if ($this->request->is(['patch', 'post', 'put'])) {
            $user_id = $this->Auth->user('id');
            $dataPassword = $this->request->getData();
            $dataPassword['id'] = $user_id;
            $user = $this->Users->newEntity($dataPassword, ['validate' => 'update']);
            if (empty($user->errors())) {
                $dataPassword['password'] = $dataPassword['password_new'];
                $user = $this->Users->get($user_id);
                $user->password = $dataPassword['password'];
                if ($this->Users->save($user)) {
                    return $this->redirect(['controller' => 'users', 'action' => 'logout']);
                } else {
                    $this->Flash->error(__('Có lỗi xảy ra vui lòng thử lại.'));
                }
            } else {
                $this->set('errors', $user->errors());
            }
        }
        $this->set(compact('user'));
    }

    /**
     *
     * *********************************************
     * @param null $number
     *
     * @param array $device_id
     * @throws \PHPExcel_Exception
     *
     * *********************************************
     *
     */
    public function exportExcel($number = null, $device_id = array())
    {
        $this->autoRender = false;
        $device_id = json_decode($device_id);
        $objPHPExcel = $this->PhpExcel->createWorksheet();
        $objPHPExcel->setActiveSheet(0);
        if ($number == 3) {
            $conditions = array(
                'num_clients_connect IN' => array(1, 2),
                'device_id IN' => $device_id
            );
        } elseif ($number > 3 && $number < 10) {
            $conditions = array(
                'num_clients_connect IN ' => array(3, 4, 5, 6, 7, 8, 9, 10),
                'device_id IN' => $device_id
            );
        } else {
            $conditions = array(
                'num_clients_connect NOT IN  ' => array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
                'device_id IN' => $device_id
            );
        }
        $partners = $this->Partners->find()->where($conditions)
            ->hydrate(false)
            ->select(['name', 'birthday', 'phone', 'address', 'num_clients_connect'])
            ->toList();
        if (!empty($partners)) {
            $lable = array();
            $k = 1;
            $lable[0]['label'] = 'No';
            foreach ($partners[0] as $key => $val) {
                $lable[$k + 1]['label'] = $key;
                $k++;
            }
            $headerStyle = array(
                'font' => array(
                    'bold' => true
                )
            );
            $objPHPExcel->addTableHeader($lable, array('bold' => true, 'headerStyle' => $headerStyle));
            $objPHPExcel->addTableFooter();
            foreach ($partners as $k => $row) {
                $objPHPExcel->addTableRow($k, $row);
            }
            $fileName = 'data' . '_' . date('Ymd-His') . '.xlsx';
            $objPHPExcel->save($fileName, 'Excel2007');
            $objPHPExcel->output($fileName, 'Excel2007');
        } else {
            $this->redirect('partners/index');
        }
    }

    /**
     * *********************************************
     * @param array $device_id
     *
     * @return \Cake\Http\Response|null
     * @throws \PHPExcel_Exception
     *
     * *********************************************
     *
     */
    public function downloadExcel()
    {
        $this->autoRender = false;
        $device_id = array();
        if ($this->request->session()->check('list_id_partner')) {
            $device_id = $this->request->session()->read('list_id_partner');
            $this->request->session()->delete('list_id_partner');
        }
        $objPHPExcel = $this->PhpExcel->createWorksheet();
        $objPHPExcel->setActiveSheet(0);
        if (!empty($device_id)) {
            $partners = $this->Partners->find()->where(['id IN ' => $device_id])
                ->hydrate(false)
                ->select(['name', 'phone', 'address'])
                ->toList();
            if (!empty($partners)) {
                $lable = array();
                $k = 1;
                $lable[0]['label'] = 'No';
                foreach ($partners[0] as $key => $val) {
                    $lable[$k + 1]['label'] = $key;
                    $k++;
                }
                $headerStyle = array(
                    'font' => array(
                        'bold' => true
                    )
                );
                $data_label = array();
                foreach ($lable as $k => $vl) {
                    if ($k == 0) {
                        $data_label[$k]['label'] = 'No';
                    } elseif ($k == 2) {
                        $data_label[$k]['label'] = 'Họ và Tên';
                    } elseif ($k == 3) {
                        $data_label[$k]['label'] = 'Số điện thoại';
                    } elseif ($k == 4) {
                        $data_label[$k]['label'] = 'Địa chỉ';
                    } else {
                        //unset($vl['label']);
                    }
                }
                $objPHPExcel->addTableHeader($data_label, array('bold' => true, 'headerStyle' => $headerStyle));
                $objPHPExcel->addTableFooter();
                foreach ($partners as $k => $row) {
                    $objPHPExcel->addTableRow($k, $row);
                }
                $fileName = 'data' . '_' . date('Ymd-His') . '.xlsx';
                $objPHPExcel->save($fileName, 'Excel2007');
                $objPHPExcel->output($fileName, 'Excel2007');
            } else {
                $this->redirect('partners/index');
            }
        } else {
            return $this->redirect(['controller' => 'Partner', 'action' => 'index']);
        }

    }

    /**
     * *********************************************
     *
     * @param array $device_id
     * @throws \PHPExcel_Exception
     *
     * * *********************************************
     */
    public function downloadExcelFace()
    {
        $this->autoRender = false;
        $device_id = array();
        if ($this->request->session()->check('list_id_partner_email')) {
            $device_id = $this->request->session()->read('list_id_partner_email');
            $this->request->session()->delete('list_id_partner_email');
        }
        $objPHPExcel = $this->PhpExcel->createWorksheet();
        $objPHPExcel->setActiveSheet(0);
        if (!empty($device_id)) {
            $partners = $this->Partners->find()->where(['id IN ' => $device_id])
                ->hydrate(false)
                ->select(['name', 'phone', 'email'])
                ->toList();
            if (!empty($partners)) {
                $lable = array();
                $k = 1;
                $lable[0]['label'] = 'No';
                foreach ($partners[0] as $key => $val) {
                    $lable[$k + 1]['label'] = $key;
                    $k++;
                }
                $headerStyle = array(
                    'font' => array(
                        'bold' => true
                    )
                );
                $data_label = array();
                foreach ($lable as $k => $vl) {
                    if ($k == 0) {
                        $data_label[$k]['label'] = 'No';
                    } elseif ($k == 2) {
                        $data_label[$k]['label'] = 'Họ và Tên';
                    } elseif ($k == 3) {
                        $data_label[$k]['label'] = 'Số điện thoại';
                    } elseif ($k == 4) {
                        $data_label[$k]['label'] = 'Địa chỉ email';
                    }
                }
                $objPHPExcel->addTableHeader($data_label, array('bold' => true, 'headerStyle' => $headerStyle));
                $objPHPExcel->addTableFooter();
                foreach ($partners as $k => $row) {
                    $objPHPExcel->addTableRow($k, $row);
                }
                $fileName = 'data' . '_' . date('Ymd-His') . '.xlsx';
                $objPHPExcel->save($fileName, 'Excel2007');
                $objPHPExcel->output($fileName, 'Excel2007');
            } else {
                $this->redirect('Facebook/index');
            }
        } else {
            $this->redirect('Facebook/index');
        }
    }

    /**
     * *****************************************************
     * downloadExcelVoucher
     * @throws \PHPExcel_Exception
     *
     * *****************************************************
     */
    public function downloadExcelVoucher()
    {
        $this->autoRender = false;
        if ($this->request->is('post')) {
            $_POST = $this->request->getData();
            $conditions = array();
            $date = explode(' - ', $_POST['date_begin']);
            $date_from = Datetime::createFromFormat('d/m/Y', $date[0])->format('Y-m-d');
            $date_to = Datetime::createFromFormat('d/m/Y', $date[1])->format('Y-m-d');
            $conditions['PartnerVouchers.created >='] = $date_from;
            $conditions['PartnerVouchers.created <='] = $date_to;
            if (isset($_POST['date']) && $_POST['date'] != '') {
                $date = explode(' to ', $_POST['date']);
                $flag_date_to = $this->verifyDate($date[1]);
                $flag_date_form = $this->verifyDate($date[0]);
                if ($flag_date_to) {
                    $date_to = Datetime::createFromFormat('Y-m-d', $date[1])->format('Y-m-d');
                    $conditions['PartnerVouchers.created <='] = $date_to;
                }
                if ($flag_date_form) {
                    $date_form = Datetime::createFromFormat('Y-m-d', $date[0])->format('Y-m-d');
                    $conditions['PartnerVouchers.created >='] = $date_form;
                }
            }
            if (isset($_POST['name']) && $_POST['name'] != '') {
                $conditions['PartnerVouchers.name LIKE'] = "%".trim($_POST['name'])."%";
            }
            if (isset($_POST['phone']) && $_POST['phone'] != '') {
                $conditions['PartnerVouchers.phone'] = trim($_POST['phone']);
            }
            if (isset($_POST['client_mac']) && $_POST['client_mac'] != '') {
                $conditions['PartnerVouchers.client_mac LIKE'] = "%".trim($_POST['client_mac'])."%";
            }
            if (isset($_POST['number_connect']) && $_POST['number_connect'] != '') {
                switch ($_POST['number_connect']) {
                    case "1":
                        $conditions['PartnerVouchers.num_clients_connect >='] = $_POST['number_connect'];
                        $conditions['PartnerVouchers.num_clients_connect <='] = 5;
                        break;
                    case "2":
                        $conditions['PartnerVouchers.num_clients_connect >='] = 6;
                        $conditions['PartnerVouchers.num_clients_connect <='] = 10;
                        break;
                    case "3":
                        $conditions['PartnerVouchers.num_clients_connect >='] = 11;
                        $conditions['PartnerVouchers.num_clients_connect <='] = 15;
                        break;
                    default:
                        $conditions['PartnerVouchers.num_clients_connect >='] = 15;
                }
            }
            if (isset($_POST['device']) && $_POST['device'] != '') {
                $conditions['device_id'] = $_POST['device'];
            }
            $conditions['PartnerVouchers.campaign_group_id'] = $_POST['campaign_group_id'];
            $objPHPExcel = $this->PhpExcel->createWorksheet();
            $objPHPExcel->setActiveSheet(0);
            $label = [
                1 => array('label' => 'No'),
                2 => array('label' => 'Họ và Tên'),
                3 => array('label' => 'Số điện thoại'),
                4 => array('label' => 'Địa chỉ email'),
                5 => array('label' => 'Ngày sinh'),
                6 => array('label' => 'Địa chỉ'),
                7 => array('label' => 'Số lần kết nối'),
                8 => array('label' => 'Địa chỉ mac'),
                9 => array('label' => 'Tên thiết bị'),
                10 => array('label' => 'Ngày truy cập')
            ];
            $headerStyle = array(
                'font' => array(
                    'bold' => true
                )
            );
            $objPHPExcel->addTableHeader($label, array('bold' => true, 'headerStyle' => $headerStyle));
            $objPHPExcel->addTableFooter();
            $fields = [
                'Devices.name',
                'PartnerVouchers.name',
                'PartnerVouchers.phone',
                'PartnerVouchers.email',
                'PartnerVouchers.birthday',
                'PartnerVouchers.address',
                'PartnerVouchers.num_clients_connect',
                'PartnerVouchers.client_mac',
                'PartnerVouchers.created',
            ];
            $query = $this->PartnerVouchers->find('all');
            $result = $query->hydrate(false)
                ->select($fields)
                ->join([
                    'Devices' => [
                        'table' => 'devices',
                        'type' => 'LEFT',
                        'conditions' => 'Devices.id = PartnerVouchers.device_id',
                    ]
                ])->order([
                    'PartnerVouchers.created' => 'DESC',
                    'PartnerVouchers.num_clients_connect' => 'DESC'
                ]);
            if (!empty($conditions)) {
                $result->where($conditions);
            }
            $data = $result->toArray();
            $new_data = array();
            foreach ($data as $index => $datum) {
                $new_data[$index] = $datum;
                $new_data[$index]['device_name'] = $datum['Devices']['name'];
                $new_data[$index]['create'] = date('d/m/Y', strtotime($datum['created']));
                unset($new_data[$index]['Devices']);
                unset($new_data[$index]['created']);
            }

            foreach ($new_data as $index => $new_datum) {
                $objPHPExcel->addTableRow($index, $new_datum);
            }
            $fileName = 'data' . '_' . date('Ymd-His') . '.xlsx';
            $objPHPExcel->save($fileName, 'Excel2007');
            $objPHPExcel->output($fileName, 'Excel2007');
        }

    }

    /**
     * *****************************************************
     * download excel file
     *
     * @throws \PHPExcel_Exception
     */
    public function download()
    {
        $this->autoRender = false;
        if ($this->request->is('post')) {
            $_POST = $this->request->getData();
            $conditions = array();
            $date = explode(' to ', $_POST['date_begin']);
            $flag_date_to = $this->verifyDate($date[1]);
            $flag_date_form = $this->verifyDate($date[0]);
            if ($flag_date_to) {
                $date_to = Datetime::createFromFormat('Y-m-d', $date[1])->format('Y-m-d');
                $conditions['Partners.created <='] = $date_to;
            }
            if ($flag_date_form) {
                $date_form = Datetime::createFromFormat('Y-m-d', $date[0])->format('Y-m-d');
                $conditions['Partners.created >='] = $date_form;
            }

            if (isset($_POST['date']) && $_POST['date'] != '') {
                $date = explode(' to ', $_POST['date']);
                $flag_date_to = $this->verifyDate($date[1]);
                $flag_date_form = $this->verifyDate($date[0]);
                if ($flag_date_to) {
                    $date_to = Datetime::createFromFormat('Y-m-d', $date[1])->format('Y-m-d');
                    $conditions['Partners.created <='] = $date_to;
                }
                if ($flag_date_form) {
                    $date_form = Datetime::createFromFormat('Y-m-d', $date[0])->format('Y-m-d');
                    $conditions['Partners.created >='] = $date_form;
                }
            }
            if (isset($_POST['name']) && $_POST['name'] != '') {
                $conditions['Partners.name LIKE'] = "%".trim($_POST['name'])."%";
            }
            if (isset($_POST['phone']) && $_POST['phone'] != '') {
                $conditions['Partners.phone LIKE'] = "%".trim($_GET['phone'])."%";
            }
            if (isset($_POST['client_mac']) && $_POST['client_mac'] != '') {
                $conditions['Partners.client_mac LIKE'] = "%".trim($_POST['client_mac'])."%";
            }
            if (isset($_POST['number_connect']) && $_POST['number_connect'] != '') {
                switch ($_POST['number_connect']) {
                    case "1":
                        $conditions['Partners.num_clients_connect >='] = $_POST['number_connect'];
                        $conditions['Partners.num_clients_connect <='] = 5;
                        break;
                    case "2":
                        $conditions['Partners.num_clients_connect >='] = 6;
                        $conditions['Partners.num_clients_connect <='] = 10;
                        break;
                    case "3":
                        $conditions['Partners.num_clients_connect >='] = 11;
                        $conditions['Partners.num_clients_connect <='] = 15;
                        break;
                    default:
                        $conditions['Partners.num_clients_connect >='] = 15;
                }
            }
            if (isset($_POST['device']) && $_POST['device'] != '') {
                $conditions['device_id'] = $_POST['device'];
            } else {
                if (isset($_POST['list_id_devices']) && $_POST['list_id_devices'] != '') {
                    $conditions['device_id IN'] = json_decode($_POST['list_id_devices']);
                }
            }
            if (isset($_POST['flag_face']) && $_POST['flag_face'] == 1) {
                $conditions['Partners.flag_face !='] = 0;
            }

            if (isset($_POST['delete_flag']) && $_POST['delete_flag'] == 0) {
                $conditions['Devices.delete_flag !='] = DELETED;
            }

            $objPHPExcel = $this->PhpExcel->createWorksheet();
            $objPHPExcel->setActiveSheet(0);
            $label = [
                1 => array('label' => 'No'),
                2 => array('label' => 'Họ và Tên'),
                3 => array('label' => 'Số điện thoại'),
                4 => array('label' => 'Địa chỉ email'),
                5 => array('label' => 'Ngày sinh'),
                6 => array('label' => 'Địa chỉ'),
                7 => array('label' => 'Số lần kết nối'),
                8 => array('label' => 'Địa chỉ mac'),
                9 => array('label' => 'Tên thiết bị'),
                10 => array('label' => 'Ngày truy cập')
            ];
            $headerStyle = array(
                'font' => array(
                    'bold' => true
                )
            );
            $objPHPExcel->addTableHeader($label, array('bold' => true, 'headerStyle' => $headerStyle));
            $objPHPExcel->addTableFooter();
            $data = $this->Partners->getOdersDownload($conditions)->toArray();
            $new_data = array();
            foreach ($data as $index => $datum) {
                $new_data[$index] = $datum;
                $new_data[$index]['device_name'] = $datum['Devices']['name'];
                $new_data[$index]['create'] = date('d/m/Y', strtotime($datum['created']));
                unset($new_data[$index]['Devices']);
                unset($new_data[$index]['created']);
            }
            foreach ($new_data as $index => $new_datum) {
                $objPHPExcel->addTableRow($index, $new_datum);
            }
            $fileName = 'data' . '_' . date('Ymd-His') . '.xlsx';
            $objPHPExcel->save($fileName, 'Excel2007');
            $objPHPExcel->output($fileName, 'Excel2007');
        }
    }
}
