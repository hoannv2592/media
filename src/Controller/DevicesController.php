<?php

namespace App\Controller;

use App\Controller\AppController;
use App\Model\Entity\Device;
use App\Model\Entity\User;
use Cake\Datasource\ConnectionManager;
use Cake\Event\Event;
use Cake\Utility\Hash;
use DateTime;

/**
 * Devices Controller
 *
 * @property \App\Model\Table\LangdingDevicesTable $LangdingDevices
 * @property \App\Model\Table\DevicesTable $Devices
 * @property \App\Model\Table\LogAuthsTable $LogAuths
 * @property \App\Model\Table\AuthsTable $Auths
 * @property \App\Model\Table\DeviceGroupsTable $DeviceGroups
 * @property \App\Model\Table\AdgroupsTable $Adgroups
 * @property \App\Model\Table\FileAttachmentsTable $FileAttachments
 * @property \App\Model\Table\PartnerVouchersTable $PartnerVouchers
 * @property \App\Model\Table\PartnerVoucherLogsTable $PartnerVoucherLogs
 *
 * @method \App\Model\Entity\Device[] paginate($object = null, array $settings = [])
 *
 * @property  \App\Controller\Component\UploadImageComponent $UploadImage
 * @property \App\Model\Table\PartnersTable $Partners
 * @property \App\Model\Table\DeviceFilesTable $DeviceFiles
 * @property \App\Model\Table\AdvsTable $Advs
 */
class DevicesController extends AppController
{

    public $paginate = [
        'sortWhitelist' => [
            'Devices.id',
            'Devices.name',
            'Devices.client_mac',
            'Devices.phone',
            'Devices.modified',
        ],
        'order' => [
            'Devices.modified' => 'desc',
        ]
    ];

    public function beforeRender(Event $event)
    {
        parent::beforeRender($event); // TODO: Change the autogenerated stub
    }

    public function initialize()
    {
        date_default_timezone_set('Asia/Ho_Chi_Minh');
        parent::initialize();
        // Include the FlashComponent
        $this->loadComponent('Flash');
        $this->loadModel('Advs');
        $this->loadModel('Logs');
        $this->loadModel('Adgroups');
        $this->loadModel('Partners');
        $this->loadModel('LogAuths');
        $this->loadComponent('UploadImage');
        $this->loadModel('DeviceFiles');
        $this->loadModel('DeviceGroups');
        $this->loadModel('PartnerVouchers');
        $this->loadModel('PartnerVoucherLogs');
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $login = $this->Auth->user();
        $limit_value = 10;
        $conditions = [];
        if (isset($_GET) && $_GET != '') {
            if (isset($_GET['name']) && $_GET['name'] != '') {
                $conditions['Devices.name LIKE'] = "%".trim($_GET['name'])."%";
            }
            $name =  $_GET['name'];
        }
        $conditions['Devices.delete_flag !='] = DELETED;
        if ($login['role'] == User::ROLE_ONE) {
            $devices = $this->Devices->find('all', [
                'contain' => ['Users' => function ($q) {
                    return $q
                        ->select(['Users.id', 'Users.username'])
                        ->where([])
                        ->hydrate(false);
                },
                    'DeviceFiles' => function ($q) {
                        return $q
                            ->select([
                                'DeviceFiles.id', 'DeviceFiles.path', 'DeviceFiles.device_id'
                            ]);
                    }
                ],
                'conditions' => $conditions,
                'order' => ['Devices.modified' => 'DESC']
            ]);

        } else {
            $conditions['Devices.user_id '] = $login['id'];
            $devices = $this->Devices->find('all', [
                'contain' => ['Users' => function ($q) {
                    return $q
                        ->where([]);
                },
                    'DeviceFiles' => function ($q) {
                        return $q
                            ->select([
                                'DeviceFiles.id', 'DeviceFiles.device_id',
                            ]);
                    }
                ],
                'conditions' => $conditions,
                'order' => ['Devices.modified' => 'DESC']
            ]);
        }
        $devices = $this->paginate($devices, ['limit' => $limit_value])->toArray();
        $this->set(compact('Adgroups', 'devices', 'conditions','name'));
    }

    /**
     * Delete method
     *
     * @return void Redirects to index.
     */
    public function delete()
    {
        $this->autoRender = false;
        $conn = ConnectionManager::get('default');
        $conn->begin();
        $this->request->allowMethod(['post', 'delete']);
        if ($this->request->getData()) {
            $device_id = $this->request->getData('id');
            $device = $this->Devices->get($device_id);
            $CampaignGroups = $this->CampaignGroups->find()->select([])->where(['delete_flag != ' => 1])->toArray();
            if (!empty($CampaignGroups)) {
                $new_list_device = array();
                $new_list_device_name = array();
                foreach ($CampaignGroups as $k => $vl) {
                    $vl['device_id'] = json_decode($vl['device_id']);
                    foreach ($vl['device_id'] as $key => $item) {
                        if ($item != $device_id) {
                            $new_list_device[] = $item;
                        }
                    }
                    $vl['device_name'] = json_decode($vl['device_name']);
                    foreach ($vl['device_name'] as $key => $item) {
                        if ($key != $device_id) {
                            $new_list_device_name[$key] = $item;
                        }
                    }
                    $vl['device_name'] = json_encode($new_list_device_name);
                    $vl['device_id'] = json_encode($new_list_device);
                    if (!$this->CampaignGroups->save($vl)) {
                        $conn->rollback();
                    }

                }
            }
            $Adgroups = $this->Adgroups->find()->select([])->where(['delete_flag != ' => 1])->toArray();

            if (!empty($Adgroups)) {
                $new_list_device = array();
                $new_list_device_name = array();
                foreach ($Adgroups as $k => $vl) {
                    $vl['device_id'] = json_decode($vl['device_id']);
                    foreach ($vl['device_id'] as $key => $item) {
                        if ($item != $device_id) {
                            $new_list_device[] = $item;
                        }
                    }
                    $vl['device_name'] = json_decode($vl['device_name']);
                    foreach ($vl['device_name'] as $key => $item) {
                        if ($key != $device_id) {
                            $new_list_device_name[$key] = $item;
                        }
                    }
                    $vl['device_name'] = json_encode($new_list_device_name);
                    $vl['device_id'] = json_encode($new_list_device);
                    if (!$this->Adgroups->save($vl)) {
                        $conn->rollback();
                    }

                }
            }
            $device->delete_flag = true;
            $device->langdingpage_id = '';
            if ($this->Devices->save($device)) {
                $conn->commit();
                die(json_encode(true));
            } else {
                $conn->rollback();
                die(json_encode(false));
            }
        }
    }

    /**
     * load method
     *
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function load()
    {
        $this->autoRender = false;
        if ($this->request->getData()) {
            $device = $this->Devices->find('all')
                ->where(['Devices.id' => $this->request->getData('id'),
                    'Devices.delete_flag !=' => DELETED])
                ->select(['Devices.id',
                    'name',
                    'apt_key',
                    'created',
                    'pass_apt_key',
                ])
                ->first()
                ->toArray();
            if ($device) {
                die(json_encode($device));
            }
        }

    }

    /**
     * isNameEditlExist method
     *
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function isNameEditlExist()
    {
        $this->autoRender = false;
        if ($this->request->getData()) {
            if ($this->request->getData('backup_name') != $this->request->getData('name')) {
                $query = $this->Devices->find('all', array(
                        'recursive' => -1,
                        'conditions' => array(
                            'name' => $this->request->getData('name'),
                            'delete_flag !=' => DELETED
                        ))
                );
                $number = $query->count();
                if (!$number) {
                    die(json_encode(true));
                } else {
                    die(json_encode(false));
                }
            } else {
                die(json_encode(true));
            }
        }
    }

    /**
     * isNameExistAdd method
     *
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function isNameExistAdd()
    {
        $this->autoRender = false;
        if ($this->request->getData()) {
            $query = $this->Devices->find('all', array(
                    'recursive' => -1,
                    'conditions' => array(
                        'name' => $this->request->getData('name'),
                        'delete_flag !=' => DELETED
                    ))
            );
            $number = $query->count();
            if (!$number) {
                die(json_encode(true));
            } else {
                die(json_encode(false));
            }
        }
    }

    public function detailDevice($id = null)
    {
        $id = \UrlUtil::_decodeUrl($id);
        $this->getAllData();
        if (!$this->Devices->exists(['id' => $id])) {
            $this->redirect(['Controller' => 'Devices', 'action' => 'index']);
        }
        $device = $this->Devices->get($id, [
            'contain' => []
        ]);
        $this->set(compact('device'));
    }

    /**
     * setQc method
     *
     * @param null $device_id
     * @param null $user_id
     * @return \Cake\Http\Response|void
     * @internal param null $id
     */
    public function setQc($device_id = null, $user_id = null)
    {
        $device_id = \UrlUtil::_decodeUrl($device_id);
        $user_id = \UrlUtil::_decodeUrl($user_id);
        $conn = ConnectionManager::get('default');
        $conn->begin();
        $this->loadModel('LangdingDevices');
        if (!$this->Users->exists(['id' => $user_id])) {
            $this->redirect(['Controller' => 'Devices', 'action' => 'index']);
        }
        if (!$this->Devices->exists(['id' => $device_id])) {
            $this->redirect(['Controller' => 'Devices', 'action' => 'index']);
        }
        $device = $this->Devices->get($device_id, [
            'contain' => []
        ]);
        if ($this->request->is('post')) {
            if ($this->request->data['tile_congratulations_return'] != '') {
                $packages = array_values($this->request->data['tile_congratulations_return']);
                $this->request->data['tile_congratulations_return'] = json_encode($packages);
            }
            if ($this->request->data['packages'] != '') {
                $packages = array_values($this->request->data['packages']);
                $this->request->data['packages'] = json_encode($packages);
            }
            if (!empty($this->request->data['logo_image']['error'] != 4)) {
                $list_file['file'] = $this->request->getData('logo_image');
                $fileOK = $this->UploadImage->uploadFiles('upload/files', $list_file);
                $path = $fileOK['urls'][0];
                $image_up_load = $list_file['file']['name'];
                $request = array();
                if ($path != '') {
                    $request['path'] = $path;
                }
                if ($image_up_load != '') {
                    $request['name'] = $image_up_load;
                }
                $request['type'] = 2;
                $request['active'] = 0;
                $request['device_id'] = $device_id;
                $logo = $this->DeviceFiles->find()->where(['device_id' => $device_id, 'type' => 2, 'active_flag !=' => 1])->select()->first();
                if (!empty($logo)) {
                    $logo->active_flag = 1;
                    $this->DeviceFiles->save($logo);
                }
                $new_back_group = $this->DeviceFiles->newEntity();
                $new_back_group = $this->DeviceFiles->patchEntity($new_back_group, $request);
                if (!$this->DeviceFiles->save($new_back_group)) {
                    $conn->rollback();
                }
                unset($this->request->data['logo_image']);
            } else {
                unset($this->request->data['logo_image']);
            }
            $image_adv = $this->request->getData('image_adv');
            $list_file = array();
            foreach ($image_adv as $k => $vl) {
                if ($vl['error'] != 4) {
                    $list_file[$k] = $vl;
                }
            }
            $list_link = $this->request->getData('link_adv');
            if (!empty($list_file)) {
                // upload the file to the server
                $new_arr = array();
                //$list_file = $this->request->getData('image_adv');
                foreach ($list_file as $k => $vl) {
                    $new_arr[]['file'] = $vl;
                }
                $fileOK = array();
                foreach ($new_arr as $k => $vl) {
                    $fileOK[$k] = $this->UploadImage->uploadFiles('upload/files', $vl);
                }
                $result = Hash::extract($fileOK, '{n}.urls');
                $path = call_user_func_array('array_merge', $result);
                $image_up_load = Hash::extract($list_file, '{n}.name');

                foreach ($image_up_load as $k => $vl) {
                    $data_file[] = array(
                        'device_id' => $device_id,
                        'path' => $path[$k],
                        'name' => $vl,
                        'url_link' => isset($list_link[$k]) ? $list_link[$k] : '',
                        'active_flag' => 0
                    );
                }
                foreach ($data_file as $k => $item) {
                    $new_back_group = $this->Advs->newEntity();
                    $new_back_group = $this->Advs->patchEntity($new_back_group, $item);
                    if (!$this->Advs->save($new_back_group)) {
                        $conn->rollback();
                    }
                }
                unset($this->request->data['image_adv']);
            } else {
                unset($this->request->data['image_adv']);
            }

            if (!empty($this->request->data['file_upload'][0]['error'] != 4)) {
                // upload the file to the server
                $new_arr = array();
                $list_file = $this->request->getData('file_upload');
                foreach ($list_file as $k => $vl) {
                    $new_arr[]['file'] = $vl;
                }
                $fileOK = array();
                foreach ($new_arr as $k => $vl) {
                    $fileOK[$k] = $this->UploadImage->uploadFiles('upload/files', $vl);
                }
                $result = Hash::extract($fileOK, '{n}.urls');
                $path = call_user_func_array('array_merge', $result);
                $image_up_load = Hash::extract($list_file, '{n}.name');

                foreach ($image_up_load as $k => $vl) {
                    $data_file[] = array(
                        'device_id' => $device_id,
                        'path' => $path[$k],
                        'name' => $vl,
                        'active_flag' => 0,
                        'type' => 1
                    );
                }
                foreach ($data_file as $k => $item) {
                    $new_back_group = $this->DeviceFiles->newEntity();
                    $new_back_group = $this->DeviceFiles->patchEntity($new_back_group, $item);
                    if (!$this->DeviceFiles->save($new_back_group)) {
                        $conn->rollback();
                    }
                }

                unset($this->request->data['file_upload']);
                unset($this->request->data['device_id']);
                $device = $this->Devices->patchEntity($device, $this->request->data);
                $device_id = $this->request->getData('device_id');
                if (empty($device->errors())) {
                    if ($this->Devices->save($device)) {
                        $conn->commit();
                        $this->redirect(['action' => 'index']);
                    } else {
                        $conn->rollback();
                        $this->redirect(['Controller' => 'Devices', 'action' => 'setQc' . '/' . \UrlUtil::_encodeUrl($device_id) . '/' . \UrlUtil::_encodeUrl($user_id)]);
                    }
                } else {
                    $conn->rollback();
                    $this->redirect(['Controller' => 'Devices', 'action' => 'setQc' . '/' . \UrlUtil::_encodeUrl($device_id) . '/' . \UrlUtil::_encodeUrl($user_id)]);
                }
            } else {
                unset($this->request->data['file_upload']);
                $device = $this->Devices->patchEntity($device, $this->request->data);
                if (empty($device->errors())) {
                    if ($this->Devices->save($device)) {
                        $conn->commit();
                        $this->redirect(['action' => 'index']);
                    } else {
                        $conn->rollback();
                        $this->redirect(['Controller' => 'Devices', 'action' => 'setQc' . '/' . \UrlUtil::_encodeUrl($device_id) . '/' . \UrlUtil::_encodeUrl($user_id)]);
                    }
                } else {
                    $conn->rollback();
                    $this->redirect(['Controller' => 'Devices', 'action' => 'setQc' . '/' . \UrlUtil::_encodeUrl($device_id) . '/' . \UrlUtil::_encodeUrl($user_id)]);
                }
            }
        }
        $files = $this->Devices->find('all', ['order' => ['Devices.created' => 'DESC']]);
        $filesRowNum = $files->count();
        $this->set('files', $files);
        $this->set('filesRowNum', $filesRowNum);
        $apt = $this->radompassWord();
        $back_group = $this->DeviceFiles->find()->where(['device_id' => $device_id, 'type' => 1, 'active_flag !=' => 1])->select(['id', 'device_id', 'path'])->combine('id', 'path')->toArray();
        $logo = $this->DeviceFiles->find()->where(['device_id' => $device_id, 'type' => 2, 'active_flag !=' => 1])->select(['id', 'device_id', 'path'])->combine('id', 'path')->toArray();
        $adv = $this->Advs->find()->where(['device_id' => $device_id, 'active_flag !=' => 1])->select(['id', 'device_id', 'path', 'url_link'])->toArray();
        $this->set(compact('logo', 'back_group', 'device', 'device_id', 'user_id', 'apt', 'adv'));
    }

    /**
     * @param null $device_id
     * @param null $voucher_flag
     * @param null $partner_id
     * @param null $flag_check_isexit_partner
     * @param null $flag_client_mac
     * @return \Cake\Http\Response|null
     */
    public function viewQc(
        $device_id = null,
        $voucher_flag = null,
        $partner_id = null,
        $flag_check_isexit_partner = null,
        $flag_client_mac = null
    )
    {
        $flag_check_isexit_partner = \UrlUtil::_decodeUrl($flag_check_isexit_partner);
        $partner_id = isset($partner_id) ? $partner_id : '';
        if ($partner_id != '') {
            $partner_id = \UrlUtil::_decodeUrl($partner_id);
        }
        $voucher_flag = \UrlUtil::_decodeUrl($voucher_flag);
        if (isset($device_id)) {
            $device_id = \UrlUtil::_decodeUrl($device_id);
            if (!$this->Devices->exists(['Devices.id' => $device_id])) {
                return $this->redirect(['action' => 'index']);
            }
            $this->loadModel('Partners');
            $infor_devices = $this->Devices->get($device_id);
            $logo = $this->DeviceFiles->find()->where(['device_id' => $device_id, 'type' => 2, 'active_flag !=' => 1])->select(['id', 'device_id', 'path'])->combine('id', 'path')->toArray();
            $back_group = $this->DeviceFiles->find()->where(['device_id' => $device_id, 'type' => 1, 'active_flag !=' => 1])->select(['id', 'device_id', 'path'])->combine('id', 'path')->toArray();
            $back_group = implode(',', $back_group);
            $logo = implode(',', $logo);
            $infor_devices->path = $back_group;
            $infor_devices->path_logo = $logo;
            if (!empty($infor_devices)) {
                $apt = $infor_devices->apt_key;
                $vouchers = $this->CampaignGroups->find()
                    ->where(['delete_flag !=' => DELETED])->combine('id', 'device_id')
                    ->toArray();
                if (!empty($vouchers)) {
                    $list_device_id_voucher = array();
                    foreach ($vouchers as $k => $voucher) {
                        $list_device_id_voucher[$k] = json_decode($voucher);
                    }
                    $id_campaign = array();
                    foreach ($list_device_id_voucher as $k => $vl) {
                        foreach ($vl as $key => $item) {
                            if ($device_id == $item) {
                                $id_campaign[$k] = $k;
                            }
                        }
                    }
                }
                if (!empty($id_campaign)) {
                    $device_campaign = $this->CampaignGroups->find()
                        ->where(['delete_flag !=' => DELETED, 'id IN' => $id_campaign])->combine('id', 'time')
                        ->toArray();
                    $current_date = date('Y-m-d');
                    $campaing_id = array();
                    foreach ($device_campaign as $k => $vl) {
                        $vl = explode(' - ', $vl);
                        $my_date = Datetime::createFromFormat('d/m/Y', $vl[1])->format('Y-m-d');
                        if ($my_date >= $current_date) {
                            $campaing_id[$k] = $my_date;
                        }
                    }

                    $interval = array();
                    if (!empty($campaing_id)) {
                        foreach ($campaing_id as $k => $vl) {
                            $interval[$k] = abs(strtotime($vl) - strtotime(date("Y-m-d")));
                        }
                    }
                    $device_campaign = array();
                    if (!empty($interval)) {
                        asort($interval);
                        $campaign_id = key($interval);
                        $device_campaign = $this->CampaignGroups->find()
                            ->where(['id' => $campaign_id, 'delete_flag !=' => DELETED])
                            ->first();
                    }
                    if (!empty($device_campaign)) {
                        $infor_devices->langdingpage_id = $device_campaign->langdingpage_id;
                        $infor_devices->path = $device_campaign->path;
                        $infor_devices->tile_name = $device_campaign->tile_name;
                        $infor_devices->apt_device_number = $device_campaign->number_pass;
                        $infor_devices->message = $device_campaign->message;
                        $infor_devices->slogan = $device_campaign->slogan;
                        $infor_devices->title_connect = $device_campaign->title_connect;
                        $infor_devices->hidden_connect = $device_campaign->hidden_connect;
                        $infor_devices->path_logo = $device_campaign->path_logo;
                        $infor_devices->title_campaign = $device_campaign->title_campaign;
                        $infor_devices->tile_congratulations_return = $device_campaign->tile_congratulations_return;
                        $infor_devices->packages = $device_campaign->packages;
                    }
                } elseif (isset($infor_devices->adgroup_id) && $infor_devices->adgroup_id != '') {
                    $device_group = $this->DeviceGroups->find()
                        ->where(['adgroup_id' => $infor_devices->adgroup_id, 'delete_flag !=' => DELETED])
                        ->first();
                    if (!empty($device_group)) {
                        $infor_devices->langdingpage_id = $device_group->langdingpage_id;
                        $infor_devices->path = $device_group->path;
                        $infor_devices->tile_name = $device_group->tile_name;
                        $infor_devices->apt_device_number = $device_group->number_pass;
                        $infor_devices->message = $device_group->message;
                        $infor_devices->slogan = $device_group->slogan;
                        $infor_devices->title_connect = $device_group->title_connect;
                        $infor_devices->hidden_connect = $device_group->hidden_connect;
                        $infor_devices->path_logo = $device_group->path_logo;
                        $infor_devices->title_campaign = $device_group->title_campaign;
                        $infor_devices->tile_congratulations_return = $device_group->tile_congratulations_return;
                        $infor_devices->packages = $device_group->packages;
                    }
                }
                if (isset($infor_devices->type_adv) && $infor_devices->type_adv == 2) {
                    $url_buil = URL . 'Devices/adv/' . $apt;
                    if ($infor_devices->type == 1) {
                        $auth = $infor_devices->auth_target;
                        $infor_devices->auth_target = $this->getAuth($auth, $url_buil);
                    } else {
                        $infor_devices->link_orig = $url_buil;
                    }
                }
            }
            $this->set(compact('infor_devices', 'voucher_flag', 'campaign_id', 'partner_id', 'flag_check_isexit_partner', 'flag_client_mac'));
        } else {
            return $this->redirect(['action' => 'index']);
        }
    }


    /**
     * Add method
     *
     * @param null $apt_key
     * @param null $flag_id
     * @return \Cake\Http\Response
     */
    public function addNewDevice($apt_key = null, $flag_id = null)
    {
        $url = $this->request;
        $apt_key = $this->slug($url->params['id']);
        $flag_id = $this->slug($url->params['flag_id']);
        $this->request->allowMethod(['post', 'get', 'put', 'ajax', 'delete']);
        $this->autoRender = false;
        if ($apt_key != '') {
            $apt_key_check = $this->Devices->find()->where(['apt_key' => $apt_key, 'delete_flag !=' => DELETED])->select()->hydrate(true)->first();
            $vouchers = $this->CampaignGroups->find()->select(['id', 'device_id'])->where(['delete_flag !=' => 1])->hydrate(false)->combine('id', 'device_id')->toArray();
            if (!empty($apt_key_check)) {
                $id_device = $apt_key_check->id;
                $link_login_only = isset($this->request->data['link_login_only']) ? $this->request->data['link_login_only'] : '';
                $link_orig = isset($this->request->data['link_orig']) ? $this->request->data['link_orig'] : '';
                $chap_id = isset($this->request->data['chap_id']) ? $this->request->data['chap_id'] : '';
                $auth_target = isset($this->request->data['auth_target']) ? $this->request->data['auth_target'] : '';
                $client_mac = isset($this->request->data['client_mac']) ? $this->request->data['client_mac'] : '';
                if (isset($flag_id) && $flag_id == Device::TB_MIRKOTIC) {
                    $client_mac = isset($this->request->data['mac']) ? $this->request->data['mac'] : '';
                    $conn = ConnectionManager::get('default');
                    $conn->begin();
                    $chk = false;
                    $partner_id = '';
                    if (!empty($vouchers)) {
                        $list_device_id_voucher = array();
                        foreach ($vouchers as $k => $voucher) {
                            $list_device_id_voucher[$k] = json_decode($voucher);
                        }
                        $id_campaign = array();
                        foreach ($list_device_id_voucher as $k => $vl) {
                            foreach ($vl as $key => $item) {
                                if ($id_device == $item) {
                                    $id_campaign[$k] = $k;
                                }
                            }
                        }
                        if (!empty($id_campaign)) {
                            $device_campaign = $this->CampaignGroups->find()
                                ->where(['id IN' => $id_campaign])->combine('id', 'time')
                                ->toArray();
                            $current_date = date('Y-m-d');
                            $campaing_id = array();
                            foreach ($device_campaign as $k => $vl) {
                                $vl = explode(' - ', $vl);
                                $my_date = Datetime::createFromFormat('d/m/Y', $vl[1])->format('Y-m-d');
                                if ($my_date >= $current_date) {
                                    $campaing_id[$k] = $my_date;
                                }
                            }
                            $interval = array();
                            foreach ($campaing_id as $k => $vl) {
                                $interval[$k] = abs(strtotime($vl) - strtotime(date("Y-m-d H:i:s")));
                            }
                            $device_campaign = array();
                            if (!empty($interval)) {
                                asort($interval);
                                $campaign_id_only = key($interval);
                                $device_campaign = $this->CampaignGroups->find()
                                    ->where(['id' => $campaign_id_only, 'delete_flag !=' => DELETED])
                                    ->first();
                            }
                            if (!empty($device_campaign)) {
                                $campaign_id = false;
                                // todo kiem tra partner da ton tai trong partner_voucher.
                                $pa_voucher = $this->PartnerVouchers->find()->where(
                                    array(
                                        'device_id' => $id_device,
                                        'client_mac' => $client_mac,
                                        'campaign_group_id' => $campaign_id_only,
                                    ))->first();
                                // todo dem so luong voucher phat ra.
//                                $number_voucher_userd = $this->PartnerVouchers->find()->where(['confirm ' => '1', 'campaign_group_id' => $campaign_id_only])->count();
                                $number_voucher_userd = $this->PartnerVouchers->find()->where(['campaign_group_id' => $campaign_id_only])->count();
                                // test
                                if (!empty($pa_voucher)) {
                                    if ($pa_voucher->confirm == 1) {
                                        $flag_normal = false;
                                        $flag_return = Device::HAS_RETURN;
                                        $pa_confirm = $this->Partners->find()->where(['device_id' => $id_device, 'client_mac' => $client_mac])->first();
                                        if (empty($pa_confirm)) {
                                            $flag_check_isexit_partner = false;
                                            $save_new_pa_vou = array(
                                                'device_id' => $apt_key_check->id,
                                                'client_mac' => $client_mac,
                                                'num_clients_connect' => 1,
                                                'name' => 'user_online',
                                                'campaign_group_id' => $campaign_id_only,
                                                'link_login_only' => $link_login_only,
                                                'link_orig' => $link_orig,
                                                'chap_id' => $chap_id,
                                            );
                                            $new_partner = $this->Partners->newEntity();
                                            $new_partner = $this->Partners->patchEntity($new_partner, $save_new_pa_vou);
                                            if (empty($new_partner->errors())) {
                                                $pa_save_new = $this->Partners->save($new_partner);
                                                if ($pa_save_new) {
                                                    $partner_id = $pa_save_new->id;
                                                }
                                            }
                                        } else {
                                            $flag_check_isexit_partner = true;
                                            $pa_voucher_v = $this->PartnerVouchers->find()->where(
                                                array(
                                                    'device_id' => $id_device,
                                                    'client_mac' => $client_mac,
                                                ))
                                                ->first();
                                            $partner_id = $pa_voucher_v['partner_id'];
                                            $data_update = array(
                                                'num_clients_connect' => $pa_voucher_v->num_clients_connect + 1,
                                                'campaign_group_id' => $campaign_id_only,
                                                'link_login_only' => $link_login_only,
                                                'link_orig' => $link_orig,
                                                'chap_id' => $chap_id,
                                            );
                                            $partner_v = $this->PartnerVouchers->patchEntity($pa_voucher_v, $data_update);
                                            if (empty($partner_v->errors())) {
                                                if (!$this->PartnerVouchers->save($partner_v)) {
                                                    $chk = true;
                                                }
                                            }
                                            $data_update_pa = array(
                                                'num_clients_connect' => $pa_confirm->num_clients_connect + 1,
                                                'campaign_group_id' => $campaign_id_only,
                                                'link_login_only' => $link_login_only,
                                                'link_orig' => $link_orig,
                                                'chap_id' => $chap_id,
                                            );
                                            $partner = $this->Partners->patchEntity($pa_confirm, $data_update_pa);
                                            if (empty($partner->errors())) {
                                                if (!$this->Partners->save($partner)) {
                                                    $chk = true;
                                                }
                                            }
                                        }
                                    } else {
                                        $flag_return = Device::NO_RETURN;
                                        $flag_normal = true;
                                        $flag_check_isexit_partner = true;
                                        $pa_confirm = $this->Partners->find()->where(
                                            array(
                                                'device_id' => $id_device,
                                                'client_mac' => $client_mac,
                                            ))
                                            ->first();
                                        $partner_id = $pa_confirm['id'];
                                        $data_update = array(
                                            'num_clients_connect' => $pa_voucher->num_clients_connect + 1,
                                            'campaign_group_id' => $campaign_id_only,
                                            'link_login_only' => $link_login_only,
                                            'link_orig' => $link_orig,
                                            'chap_id' => $chap_id,
                                        );
                                        $partner_v = $this->PartnerVouchers->patchEntity($pa_voucher, $data_update);
                                        if (empty($partner_v->errors())) {
                                            if (!$this->PartnerVouchers->save($partner_v)) {
                                                $chk = true;
                                            }
                                        }
                                        $partner_p = $this->Partners->patchEntity($pa_confirm, $data_update);
                                        if (empty($partner_p->errors())) {
                                            if (!$this->Partners->save($partner_p)) {
                                                $chk = true;
                                            }
                                        }
                                    }
                                } else {
                                    $flag_return = Device::NO_RETURN;
                                    if ($number_voucher_userd <= $device_campaign->number_voucher) {
                                        if ($device_campaign->random == 2) {
                                            $flag_normal = true;
                                        } else {
                                            $flag_get_voucher = $this->getVoucher($client_mac);
                                            if ($flag_get_voucher) {
                                                $flag_normal = true;
                                            } else {
                                                $flag_normal = false;
                                            }
                                        }
                                        $flag_check_isexit_partner = false;
                                        $save_new_pa_vou = array(
                                            'device_id' => $apt_key_check->id,
                                            'client_mac' => $client_mac,
                                            'num_clients_connect' => 1,
                                            'name' => 'user_online',
                                            'campaign_group_id' => $campaign_id_only,
                                            'link_login_only' => $link_login_only,
                                            'link_orig' => $link_orig,
                                            'chap_id' => $chap_id,
                                        );
                                        $new_partner_v = $this->PartnerVouchers->newEntity();
                                        $new_partner_v = $this->PartnerVouchers->patchEntity($new_partner_v, $save_new_pa_vou);
                                        $new_partner = $this->Partners->newEntity();
                                        $new_partner = $this->Partners->patchEntity($new_partner, $save_new_pa_vou);
                                        if (empty($new_partner->errors())) {
                                            $save_partner = $this->Partners->save($new_partner);
                                            if ($save_partner) {
                                                $new_partner_v->partner_id = $save_partner->id;
                                                $partner_id = $save_partner->id;
                                                if (empty($new_partner_v->errors())) {
                                                    if (!$this->PartnerVouchers->save($new_partner_v)) {
                                                        $chk = true;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        $flag_check_isexit_partner = false;
                                        $flag_normal = false;
                                        $save_new_pa_vou = array(
                                            'device_id' => $apt_key_check->id,
                                            'client_mac' => $client_mac,
                                            'num_clients_connect' => 1,
                                            'name' => 'user_online',
                                            'campaign_group_id' => $campaign_id_only,
                                            'link_login_only' => $link_login_only,
                                            'link_orig' => $link_orig,
                                            'chap_id' => $chap_id,
                                        );
                                        $new_partner = $this->Partners->newEntity();
                                        $new_partner = $this->Partners->patchEntity($new_partner, $save_new_pa_vou);
                                        if (empty($new_partner->errors())) {
                                            $pa_save = $this->Partners->save($new_partner);
                                            if ($pa_save) {
                                                $partner_id = $pa_save->id;
                                            }
                                        }
                                    }
                                }
                            } else {
                                $campaign_id = true;
                                $flag_normal = false;
                                $flag_return = Device::NO_RETURN;
                                $partner = $this->Partners->find()->where(
                                    array(
                                        'device_id' => $apt_key_check->id,
                                        'client_mac' => $client_mac,
                                    ))
                                    ->first();
                                if (empty($partner)) {
                                    $flag_check_isexit_partner = false;
                                    $save_new_pa = array(
                                        'device_id' => $apt_key_check->id,
                                        'client_mac' => $client_mac,
                                        'num_clients_connect' => 1,
                                        'name' => 'user_online',
                                        'link_login_only' => $link_login_only,
                                        'link_orig' => $link_orig,
                                        'chap_id' => $chap_id,
                                    );
                                    $new_partner = $this->Partners->newEntity();
                                    $new_partner = $this->Partners->patchEntity($new_partner, $save_new_pa);
                                    if (empty($new_partner->errors())) {
                                        $partner_s = $this->Partners->save($new_partner);
                                        if ($partner_s) {
                                            $partner_id = $partner_s->id;
                                        }
                                    }
                                } else {
                                    $flag_check_isexit_partner = true;
                                    $partner_id = $partner['id'];
                                    $data_update = array(
                                        'num_clients_connect' => $partner['num_clients_connect'] + 1,
                                        'link_login_only' => $link_login_only,
                                        'link_orig' => $link_orig,
                                        'chap_id' => $chap_id,
                                    );
                                    $partner = $this->Partners->patchEntity($partner, $data_update);
                                    if (empty($partner->errors())) {
                                        if (!$this->Partners->save($partner)) {
                                            $chk = true;
                                        }
                                    }
                                }
                            }
                        } else {
                            $flag_return = Device::NO_RETURN;
                            $flag_normal = false;
                            $partner = $this->Partners->find()->where(
                                array(
                                    'device_id' => $apt_key_check->id,
                                    'client_mac' => $client_mac,
                                ))
                                ->first();
                            if (empty($partner)) {
                                $flag_check_isexit_partner = false;
                                $save_new_pa = array(
                                    'device_id' => $apt_key_check->id,
                                    'client_mac' => $client_mac,
                                    'num_clients_connect' => 1,
                                    'name' => 'user_online',
                                    'link_login_only' => $link_login_only,
                                    'link_orig' => $link_orig,
                                    'chap_id' => $chap_id,
                                );
                                $new_partner = $this->Partners->newEntity();
                                $new_partner = $this->Partners->patchEntity($new_partner, $save_new_pa);
                                if (empty($new_partner->errors())) {
                                    $partner_s = $this->Partners->save($new_partner);
                                    if ($partner_s) {
                                        $partner_id = $partner_s->id;
                                    }
                                }
                            } else {
                                $flag_check_isexit_partner = true;
                                $partner_id = $partner['id'];
                                $data_update = array(
                                    'num_clients_connect' => $partner['num_clients_connect'] + 1,
                                    'link_login_only' => $link_login_only,
                                    'link_orig' => $link_orig,
                                    'chap_id' => $chap_id,
                                );
                                $partner = $this->Partners->patchEntity($partner, $data_update);
                                if (empty($partner->errors())) {
                                    if (!$this->Partners->save($partner)) {
                                        $chk = true;
                                    }
                                }
                            }
                        }
                    } else {
                        $flag_return = Device::NO_RETURN;
                        $flag_normal = false;
                        $partner = $this->Partners->find()->where(
                            array(
                                'device_id' => $apt_key_check->id,
                                'client_mac' => $client_mac,
                            ))
                            ->first();
                        if (empty($partner)) {
                            $flag_check_isexit_partner = false;
                            $save_new_pa = array(
                                'device_id' => $apt_key_check->id,
                                'client_mac' => $client_mac,
                                'num_clients_connect' => 1,
                                'name' => 'user_online',
                                'link_login_only' => $link_login_only,
                                'link_orig' => $link_orig,
                                'chap_id' => $chap_id,
                            );
                            $new_partner = $this->Partners->newEntity();
                            $new_partner = $this->Partners->patchEntity($new_partner, $save_new_pa);
                            if (empty($new_partner->errors())) {
                                $partner_s = $this->Partners->save($new_partner);
                                if ($partner_s) {
                                    $partner_id = $partner_s->id;
                                }
                            }
                        } else {
                            $flag_adgroup = $this->getFlagInAdgroup($apt_key_check['langdingpage_id'], $id_device);
                            if ($flag_adgroup == 1) {
                                $flag_check_isexit_partner = true;
                            } else {
                                $flag_check_isexit_partner = false;
                            }
                            $partner_id = $partner['id'];
                            $data_update = array(
                                'num_clients_connect' => $partner['num_clients_connect'] + 1,
                                'link_login_only' => $link_login_only,
                                'link_orig' => $link_orig,
                                'chap_id' => $chap_id,
                            );
                            $partner = $this->Partners->patchEntity($partner, $data_update);
                            if (empty($partner->errors())) {
                                if (!$this->Partners->save($partner)) {
                                    $chk = true;
                                }
                            }
                        }
                    }
                    $device = $this->Devices->patchEntity($apt_key_check, $this->request->data);
                    $device->type = Device::TB_MIRKOTIC;
                    if (isset($campaign_id) && $campaign_id == 1) {
                        $device->campaign_group_id = '';
                    }
                    if (empty($device->errors())) {
                        if (!$this->Devices->save($device)) {
                            $chk = true;
                        }
                    }
                    if ($flag_check_isexit_partner) {
                        $flag_check_isexit_partner = 1;
                    } else {
                        $flag_check_isexit_partner = 2;
                    }
                    if (!$chk) {
                        $conn->commit();
                        if ($flag_normal) {
                            $this->redirect([
                                'plugin' => null,
                                'controller' => 'Devices',
                                'action' => 'view_qc' . '/'
                                    . \UrlUtil::_encodeUrl($device->id) . '/'
                                    . \UrlUtil::_encodeUrl(1) . '/'
                                    . \UrlUtil::_encodeUrl($partner_id) . '/'
                                    . \UrlUtil::_encodeUrl($flag_check_isexit_partner) . '/'
                                    . $flag_return
                            ]);
                        } else {
                            $this->redirect([
                                'plugin' => null,
                                'controller' => 'Devices',
                                'action' => 'view_qc' . '/'
                                    . \UrlUtil::_encodeUrl($device->id) . '/'
                                    . \UrlUtil::_encodeUrl(2) . '/'
                                    . \UrlUtil::_encodeUrl($partner_id) . '/'
                                    . \UrlUtil::_encodeUrl($flag_check_isexit_partner) . '/'
                                    . $flag_return
                            ]);
                        }
                    } else {
                        $conn->rollback();
                    }
                } else {
                    $conn = ConnectionManager::get('default');
                    $conn->begin();
                    $chk = false;
                    $partner_id = '';
                    if (!empty($vouchers)) {
                        $list_device_id_voucher = array();
                        foreach ($vouchers as $k => $voucher) {
                            $list_device_id_voucher[$k] = json_decode($voucher);
                        }
                        $id_campaign = array();
                        foreach ($list_device_id_voucher as $k => $vl) {
                            foreach ($vl as $key => $item) {
                                if ($id_device == $item) {
                                    $id_campaign[$k] = $k;
                                }
                            }
                        }
                        if (!empty($id_campaign)) {
                            $device_campaign = $this->CampaignGroups->find()->where(['id IN' => $id_campaign])->combine('id', 'time')->toArray();
                            $current_date = date('Y-m-d');
                            $campaing_id = array();
                            foreach ($device_campaign as $k => $vl) {
                                $vl = explode(' - ', $vl);
                                $my_date = Datetime::createFromFormat('d/m/Y', $vl[1])->format('Y-m-d');
                                //$my_date = date('Y-m-d', strtotime($vl[1]));
                                if ($my_date >= $current_date) {
                                    $campaing_id[$k] = $my_date;
                                }
                            }
                            $interval = array();
                            foreach ($campaing_id as $k => $vl) {
                                $interval[$k] = abs(strtotime($vl) - strtotime(date("Y-m-d")));
                            }
                            $device_campaign = array();
                            if (!empty($interval)) {
                                asort($interval);
                                $campaign_id_only = key($interval);
                                $device_campaign = $this->CampaignGroups->find()->where([
                                    'id' => $campaign_id_only,
                                    'delete_flag !=' => DELETED
                                ])->first();
                            }
                            if (!empty($device_campaign)) {
                                // todo kiem tra partner da ton tai trong partner_voucher.
                                $pa_voucher = $this->PartnerVouchers->find()->where(array(
                                    'device_id' => $id_device,
                                    'client_mac' => $client_mac,
                                    'campaign_group_id' => $campaign_id_only,
                                ))->first();
                                // todo dem so luong voucher phat ra.
//                                $number_voucher_userd = $this->PartnerVouchers->find()->where(['confirm ' => '1', 'campaign_group_id' => $campaign_id_only])->count();
                                $number_voucher_userd = $this->PartnerVouchers->find()->where(['campaign_group_id' => $campaign_id_only])->count();
                                $campaign_id = false;
                                if (!empty($pa_voucher)) {
                                    if ($pa_voucher->confirm == 1) {
                                        $flag_return = Device::HAS_RETURN;
                                        $flag_normal = false;
                                        $pa_confirm = $this->Partners->find()->where(
                                            array(
                                                'device_id' => $id_device,
                                                'client_mac' => $client_mac,
                                                'campaign_group_id' => $campaign_id_only
                                            ))
                                            ->first();
                                        if (empty($pa_confirm)) {
                                            $flag_check_isexit_partner = false;
                                            $save_new_pa_vou = array(
                                                'device_id' => $apt_key_check->id,
                                                'client_mac' => $client_mac,
                                                'num_clients_connect' => 1,
                                                'name' => 'user_online',
                                                'campaign_group_id' => $campaign_id_only,
                                                'auth_target' => $auth_target
                                            );
                                            $new_partner = $this->Partners->newEntity();
                                            $new_partner = $this->Partners->patchEntity($new_partner, $save_new_pa_vou);
                                            if (empty($new_partner->errors())) {
                                                $pa_save_new = $this->Partners->save($new_partner);
                                                if ($pa_save_new) {
                                                    $partner_id = $pa_save_new->id;
                                                }
                                            }
                                        } else {
                                            $flag_check_isexit_partner = true;
                                            $pa_voucher = $this->PartnerVouchers->find()->where(
                                                array(
                                                    'device_id' => $id_device,
                                                    'client_mac' => $client_mac,
                                                    'campaign_group_id' => $campaign_id_only
                                                ))
                                                ->first();
                                            $partner_id = $pa_voucher['partner_id'];
                                            $data_update = array(
                                                'num_clients_connect' => $pa_voucher->num_clients_connect + 1,
                                                'auth_target' => $auth_target,
                                                'campaign_group_id' => $campaign_id_only,
                                            );
                                            $partner_v = $this->PartnerVouchers->patchEntity($pa_voucher, $data_update);
                                            if (empty($partner_v->errors())) {
                                                if (!$this->PartnerVouchers->save($partner_v)) {
                                                    $chk = true;
                                                }
                                            }
                                            $data_update_pa = array(
                                                'num_clients_connect' => $pa_confirm->num_clients_connect + 1,
                                                'auth_target' => $auth_target,
                                                'campaign_group_id' => $campaign_id_only,
                                            );
                                            $partner = $this->Partners->patchEntity($pa_confirm, $data_update_pa);
                                            if (empty($partner->errors())) {
                                                if (!$this->Partners->save($partner)) {
                                                    $chk = true;
                                                }
                                            }
                                        }
                                    } else {
                                        $flag_return = Device::NO_RETURN;
                                        $flag_normal = true;
                                        $flag_check_isexit_partner = true;
                                        $pa_confirm = $this->Partners->find()->where(
                                            array(
                                                'device_id' => $id_device,
                                                'client_mac' => $client_mac,
                                                'campaign_group_id' => $campaign_id_only,
                                            ))->first();
                                        $partner_id = $pa_confirm['id'];
                                        $data_update = array(
                                            'num_clients_connect' => $pa_confirm->num_clients_connect + 1,
                                            'auth_target' => $auth_target,
                                            'campaign_group_id' => $campaign_id_only,
                                        );
                                        $partner_v = $this->PartnerVouchers->patchEntity($pa_voucher, $data_update);
                                        if (empty($partner_v->errors())) {
                                            if (!$this->PartnerVouchers->save($partner_v)) {
                                                $chk = true;
                                            }
                                        }
                                        $partner_p = $this->Partners->patchEntity($pa_confirm, $data_update);
                                        if (empty($partner_p->errors())) {
                                            if (!$this->Partners->save($partner_p)) {
                                                $chk = true;
                                            }
                                        }
                                    }
                                } else {
                                    $flag_return = Device::NO_RETURN;
                                    if ($number_voucher_userd <= $device_campaign->number_voucher) {
                                        if ($device_campaign->random == 2) {
                                            $flag_normal = true;
                                        } else {
                                            $flag_get_voucher = $this->getVoucher($client_mac);
                                            if ($flag_get_voucher) {
                                                $flag_normal = true;
                                            } else {
                                                $flag_normal = false;
                                            }
                                        }
                                        $flag_check_isexit_partner = false;
                                        $save_new_pa_vou_v = array(
                                            'device_id' => $apt_key_check->id,
                                            'client_mac' => $client_mac,
                                            'auth_target' => $auth_target,
                                            'num_clients_connect' => 1,
                                            'name' => 'user_online',
                                            'apt_device_pass' => $this->radompassWord(),
                                            'campaign_group_id' => $campaign_id_only,
                                        );
                                        $new_partner_v = $this->PartnerVouchers->newEntity();
                                        $new_partner_v = $this->PartnerVouchers->patchEntity($new_partner_v, $save_new_pa_vou_v);
                                        //todo save partner
                                        $new_partner_type_one = $this->Partners->newEntity();
                                        $new_partner_type_one = $this->Partners->patchEntity($new_partner_type_one, $save_new_pa_vou_v);
                                        if (empty($new_partner_type_one->errors())) {
                                            $save_pa = $this->Partners->save($new_partner_type_one);
                                            if ($save_pa) {
                                                $new_partner_v->partner_id = $save_pa->id;
                                                $partner_id = $save_pa->id;
                                                if (empty($new_partner_v->errors())) {
                                                    if (!$this->PartnerVouchers->save($new_partner_v)) {
                                                        $chk = true;
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        $flag_normal = false;
                                        $flag_check_isexit_partner = false;
                                        $save_new_pa_vou_v = array(
                                            'device_id' => $apt_key_check->id,
                                            'client_mac' => $client_mac,
                                            'auth_target' => $auth_target,
                                            'num_clients_connect' => 1,
                                            'name' => 'user_online',
                                            'apt_device_pass' => $this->radompassWord(),
                                            'campaign_group_id' => $campaign_id_only,
                                        );
                                        $new_partner = $this->Partners->newEntity();
                                        $new_partner = $this->Partners->patchEntity($new_partner, $save_new_pa_vou_v);
                                        if (empty($new_partner->errors())) {
                                            $pa_save = $this->Partners->save($new_partner);
                                            if ($pa_save) {
                                                $partner_id = $pa_save->id;
                                            }
                                        }
                                    }
                                }
                            } else {
                                $campaign_id = true;
                                $flag_normal = false;
                                $flag_return = Device::NO_RETURN;
                                $partner = $this->Partners->find()->where(
                                    array(
                                        'device_id' => $apt_key_check->id,
                                        'client_mac' => $client_mac
                                    ))->first();
                                if (empty($partner)) {
                                    $flag_check_isexit_partner = false;
                                    $save_new_pa = array(
                                        'device_id' => $apt_key_check->id,
                                        'client_mac' => $client_mac,
                                        'auth_target' => $auth_target,
                                        'num_clients_connect' => 1,
                                        'name' => 'user_online',
                                        'apt_device_pass' => $this->radompassWord()
                                    );
                                    $new_partner = $this->Partners->newEntity();
                                    $new_partner = $this->Partners->patchEntity($new_partner, $save_new_pa);
                                    if (empty($new_partner->errors())) {
                                        $partner_s = $this->Partners->save($new_partner);
                                        if ($partner_s) {
                                            $partner_id = $partner_s->id;
                                        }
                                    }
                                } else {
                                    $flag_check_isexit_partner = true;
                                    $partner_id = $partner['id'];
                                    $data_update = array(
                                        'num_clients_connect' => $partner['num_clients_connect'] + 1,
                                        'auth_target' => $auth_target,
                                        'campaign_group_id' => $campaign_id_only,
                                    );
                                    $partner = $this->Partners->patchEntity($partner, $data_update);
                                    if (empty($partner->errors())) {
                                        if (!$this->Partners->save($partner)) {
                                            $chk = true;
                                        }
                                    }
                                }
                            }
                        } else {
                            $flag_normal = false;
                            $flag_return = Device::NO_RETURN;
                            $partner = $this->Partners->find()->where(
                                array(
                                    'device_id' => $apt_key_check->id,
                                    'client_mac' => $client_mac
                                ))->first();
                            if (empty($partner)) {
                                $flag_check_isexit_partner = false;
                                $save_new_pa = array(
                                    'device_id' => $apt_key_check->id,
                                    'client_mac' => $client_mac,
                                    'auth_target' => $auth_target,
                                    'num_clients_connect' => 1,
                                    'name' => 'user_online',
                                    'apt_device_pass' => $this->radompassWord()
                                );
                                $new_partner = $this->Partners->newEntity();
                                $new_partner = $this->Partners->patchEntity($new_partner, $save_new_pa);
                                if (empty($new_partner->errors())) {
                                    $partner_s = $this->Partners->save($new_partner);
                                    if ($partner_s) {
                                        $partner_id = $partner_s->id;
                                    }
                                }
                            } else {
                                $flag_adgroup = $this->getFlagInAdgroup($apt_key_check['langdingpage_id'], $id_device);
                                if ($flag_adgroup == 1) {
                                    $flag_check_isexit_partner = true;
                                } else {
                                    $flag_check_isexit_partner = false;
                                }
                                $partner_id = $partner['id'];
                                $data_update = array(
                                    'num_clients_connect' => $partner['num_clients_connect'] + 1,
                                    'auth_target' => $auth_target,
                                );
                                $partner = $this->Partners->patchEntity($partner, $data_update);
                                if (empty($partner->errors())) {
                                    if (!$this->Partners->save($partner)) {
                                        $chk = true;
                                    }
                                }
                            }
                        }
                    } else {
                        $flag_return = Device::NO_RETURN;
                        $flag_normal = false;
                        $partner = $this->Partners->find()->where(
                            array(
                                'device_id' => $apt_key_check->id,
                                'client_mac' => $client_mac
                            ))->first();
                        if (empty($partner)) {
                            $flag_check_isexit_partner = false;
                            $save_new_pa = array(
                                'device_id' => $apt_key_check->id,
                                'client_mac' => $client_mac,
                                'auth_target' => $auth_target,
                                'num_clients_connect' => 1,
                                'name' => 'user_online',
                                'apt_device_pass' => $this->radompassWord()
                            );
                            $new_partner = $this->Partners->newEntity();
                            $new_partner = $this->Partners->patchEntity($new_partner, $save_new_pa);
                            if (empty($new_partner->errors())) {
                                $partner_s = $this->Partners->save($new_partner);
                                if ($partner_s) {
                                    $partner_id = $partner_s->id;
                                }
                            }
                        } else {
                            $flag_adgroup = $this->getFlagInAdgroup($apt_key_check['langdingpage_id'], $id_device);
                            if ($flag_adgroup == 1) {
                                $flag_check_isexit_partner = true;
                            } else {
                                $flag_check_isexit_partner = false;
                            }
                            $partner_id = $partner['id'];
                            $data_update = array(
                                'num_clients_connect' => $partner['num_clients_connect'] + 1,
                                'auth_target' => $auth_target,
                            );
                            $partner = $this->Partners->patchEntity($partner, $data_update);
                            if (empty($partner->errors())) {
                                if (!$this->Partners->save($partner)) {
                                    $chk = true;
                                }
                            }
                        }
                    }
                    $device = $this->Devices->patchEntity($apt_key_check, $this->request->data);
                    $device->type = Device::TB_NORMAR;
                    if (isset($campaign_id) && $campaign_id == 1) {
                        $device->campaign_group_id = '';
                    }
                    if (empty($device->errors())) {
                        if (!$this->Devices->save($device)) {
                            $chk = true;
                        }
                    }
                    if ($flag_check_isexit_partner) {
                        $flag_check_isexit_partner = 1;
                    } else {
                        $flag_check_isexit_partner = 2;
                    }
                    if (!$chk) {
                        $conn->commit();
                        if ($flag_normal) {
                            $this->redirect([
                                'plugin' => null,
                                'controller' => 'Devices',
                                'action' => 'view_qc' . '/'
                                    . \UrlUtil::_encodeUrl($device->id) . '/'
                                    . \UrlUtil::_encodeUrl(1) . '/'
                                    . \UrlUtil::_encodeUrl($partner_id) . '/'
                                    . \UrlUtil::_encodeUrl($flag_check_isexit_partner) . '/'
                                    . $flag_return
                            ]);
                        } else {
                            $this->redirect([
                                'plugin' => null,
                                'controller' => 'Devices',
                                'action' => 'view_qc' . '/'
                                    . \UrlUtil::_encodeUrl($device->id) . '/'
                                    . \UrlUtil::_encodeUrl(2) . '/'
                                    . \UrlUtil::_encodeUrl($partner_id) . '/'
                                    . \UrlUtil::_encodeUrl($flag_check_isexit_partner) . '/'
                                    . $flag_return
                            ]);
                        }
                    } else {
                        $conn->rollback();
                    }
                }
            } else {
                $conn = ConnectionManager::get('default');
                $conn->begin();
                $query = $this->Users->find('all', [])->count();
                $users = $this->Users->newEntity();
                $data_user = [
                    'username' => USER . ($query + 1),
                    'email' => USER . ($query + 1) . '@wifimedia.com',
                    'password' => '123456',
                    'delete_flag' => UN_DELETED,
                    'role' => User::ROLE_TOW
                ];
                $this->request->data['type'] = $flag_id;
                $this->request->data['apt_key'] = $apt_key;
                $device = $this->Devices->newEntity();
                $device = $this->Devices->patchEntity($device, $this->request->data);
                $device->delete_flag = UN_DELETED;
                $device->status = UN_DELETED;
                $device->name = DEVICE . ($query + 1);
                $users = $this->Users->patchEntity($users, $data_user);
                if ($flag_id == 1) {
                    $client_mac = isset($this->request->data['client_mac']) ? $this->request->data['client_mac'] : '';
                } else {
                    $client_mac = isset($this->request->data['mac']) ? $this->request->data['mac'] : '';
                }
                $old_partner = $this->Partners->find()->where(['client_mac' => $client_mac])->first();
                if (!empty($old_partner)) {
                    $data_new_par = array(
                        'num_clients_connect' => $old_partner['num_clients_connect'] + 1
                    );
                    $partner = $this->Partners->patchEntity($old_partner, $data_new_par);
                } else {
                    $data_new_par = array(
                        'client_mac' => $client_mac,
                        'link_login_only' => isset($this->request->data['link_login_only']) ? $this->request->data['link_login_only'] : '',
                        'link_orig' => isset($this->request->data['link_orig']) ? $this->request->data['link_orig'] : '',
                        'chap_id' => isset($this->request->data['chap_id']) ? $this->request->data['chap_id'] : '',
                        'auth_target' => isset($this->request->data['auth_target']) ? $this->request->data['auth_target'] : '',
                        'num_clients_connect' => 1,
                        'name' => 'user_online',
                    );
                    $partner = $this->Partners->newEntity();
                    $partner = $this->Partners->patchEntity($partner, $data_new_par);
                }
                if (empty($users->errors())) {
                    $result = $this->Users->save($users);
                    if ($result) {
                        $device->user_id = $result->id;
                        if (empty($device->errors())) {
                            $data_device = $this->Devices->save($device);
                            if ($data_device) {
                                $partner->device_id = $data_device->id;
                                $partner_id = $data_device->id;
                                if (empty($partner->errors())) {
                                    if ($this->Partners->save($partner)) {
                                        $conn->commit();
                                        $this->redirect([
                                            'plugin' => null,
                                            'controller' => 'Devices',
                                            'action' => 'view_qc' . '/' . \UrlUtil::_encodeUrl($data_device->id) . '/' . \UrlUtil::_encodeUrl(2) . '/' . \UrlUtil::_encodeUrl($partner_id) . '/' . \UrlUtil::_decodeUrl(2) . '/4'
                                        ]);
                                    }
                                }
                            } else {
                                $conn->rollback();
                            }
                        } else {
                            $conn->rollback();
                        }
                    } else {
                        $conn->rollback();
                    }
                }
            }
        } else {
            return $this->redirect(['controller' => 'Devices', 'action' => 'index']);
        }
    }

    public function setQcMirkotic($device_id = null, $user_id = null)
    {
        $device_id = \UrlUtil::_decodeUrl($device_id);
        $user_id = \UrlUtil::_decodeUrl($user_id);
        $conn = ConnectionManager::get('default');
        $conn->begin();
        $this->loadModel('LangdingDevices');
        if (!$this->Users->exists(['id' => $user_id])) {
            $this->redirect(['Controller' => 'Devices', 'action' => 'index']);
        }
        if (!$this->Devices->exists(['id' => $device_id])) {
            $this->redirect(['Controller' => 'Devices', 'action' => 'index']);
        }
        $device = $this->Devices->get($device_id, [
            'contain' => []
        ]);
        if ($this->request->is('post')) {
            if ($this->request->data['tile_congratulations_return'] != '') {
                $packages = array_values($this->request->data['tile_congratulations_return']);
                $this->request->data['tile_congratulations_return'] = json_encode($packages);
            }
            if ($this->request->data['packages'] != '') {
                $packages = array_values($this->request->data['packages']);
                $this->request->data['packages'] = json_encode($packages);
            }
            if (!empty($this->request->data['logo_image']['error'] != 4)) {
                $list_file['file'] = $this->request->getData('logo_image');
                $fileOK = $this->UploadImage->uploadFiles('upload/files', $list_file);
                $path = $fileOK['urls'][0];
                $image_up_load = $list_file['file']['name'];
                $request = array();
                if ($path != '') {
                    $request['path'] = $path;
                }
                if ($image_up_load != '') {
                    $request['name'] = $image_up_load;
                }
                $request['type'] = 2;
                $request['active'] = 0;
                $request['device_id'] = $device_id;
                $logo = $this->DeviceFiles->find()->where(['device_id' => $device_id, 'type' => 2, 'active_flag !=' => 1])->select()->first();
                if (!empty($logo)) {
                    $logo->active_flag = 1;
                    $this->DeviceFiles->save($logo);
                }
                $new_back_group = $this->DeviceFiles->newEntity();
                $new_back_group = $this->DeviceFiles->patchEntity($new_back_group, $request);
                if (!$this->DeviceFiles->save($new_back_group)) {
                    $conn->rollback();
                }
                unset($this->request->data['logo_image']);
            } else {
                unset($this->request->data['logo_image']);
            }
            $image_adv = $this->request->getData('image_adv');
            $list_file = array();
            foreach ($image_adv as $k => $vl) {
                if ($vl['error'] != 4) {
                    $list_file[$k] = $vl;
                }
            }
            $list_link = $this->request->getData('link_adv');
            if (!empty($list_file)) {
                // upload the file to the server
                $new_arr = array();
                //$list_file = $this->request->getData('image_adv');
                foreach ($list_file as $k => $vl) {
                    $new_arr[]['file'] = $vl;
                }
                $fileOK = array();
                foreach ($new_arr as $k => $vl) {
                    $fileOK[$k] = $this->UploadImage->uploadFiles('upload/files', $vl);
                }
                $result = Hash::extract($fileOK, '{n}.urls');
                $path = call_user_func_array('array_merge', $result);
                $image_up_load = Hash::extract($list_file, '{n}.name');

                foreach ($image_up_load as $k => $vl) {
                    $data_file[] = array(
                        'device_id' => $device_id,
                        'path' => $path[$k],
                        'name' => $vl,
                        'url_link' => isset($list_link[$k]) ? $list_link[$k] : '',
                        'active_flag' => 0
                    );
                }
                foreach ($data_file as $k => $item) {
                    $new_back_group = $this->Advs->newEntity();
                    $new_back_group = $this->Advs->patchEntity($new_back_group, $item);
                    if (!$this->Advs->save($new_back_group)) {
                        $conn->rollback();
                    }
                }
                unset($this->request->data['image_adv']);
            } else {
                unset($this->request->data['image_adv']);
            }
            if (!empty($this->request->data['file_upload'][0]['error'] != 4)) {
                // upload the file to the server
                $new_arr = array();
                $list_file = $this->request->getData('file_upload');
                foreach ($list_file as $k => $vl) {
                    $new_arr[]['file'] = $vl;

                }
                $fileOK = array();
                foreach ($new_arr as $k => $vl) {
                    $fileOK[$k] = $this->UploadImage->uploadFiles('upload/files', $vl);
                }
                $result = Hash::extract($fileOK, '{n}.urls');
                $path = call_user_func_array('array_merge', $result);
                $image_up_load = Hash::extract($list_file, '{n}.name');
                foreach ($image_up_load as $k => $vl) {
                    $data_file[] = array(
                        'device_id' => $device_id,
                        'path' => $path[$k],
                        'name' => $vl,
                        'active_flag' => 0,
                        'type' => 1
                    );
                }
                foreach ($data_file as $k => $item) {
                    $new_back_group = $this->DeviceFiles->newEntity();
                    $new_back_group = $this->DeviceFiles->patchEntity($new_back_group, $item);
                    if (!$this->DeviceFiles->save($new_back_group)) {
                        $conn->rollback();
                    }
                }
                unset($this->request->data['file_upload']);
                unset($this->request->data['device_id']);
                $device = $this->Devices->patchEntity($device, $this->request->data);
                $device_id = $this->request->getData('device_id');
                if (empty($device->errors())) {
                    if ($this->Devices->save($device)) {
                        $conn->commit();
                        $this->redirect(['action' => 'index']);
                    } else {
                        $conn->rollback();
                        $this->redirect(['Controller' => 'Devices', 'action' => 'setQcMirkotic' . '/' . \UrlUtil::_encodeUrl($device_id) . '/' . \UrlUtil::_encodeUrl($user_id)]);
                    }
                } else {
                    $conn->rollback();
                    $this->redirect(['Controller' => 'Devices', 'action' => 'setQcMirkotic' . '/' . \UrlUtil::_encodeUrl($device_id) . '/' . \UrlUtil::_encodeUrl($user_id)]);
                }
            } else {
                unset($this->request->data['file_upload']);
                $device = $this->Devices->patchEntity($device, $this->request->data);
                if (empty($device->errors())) {
                    if ($this->Devices->save($device)) {
                        $conn->commit();
                        $this->redirect(['action' => 'index']);
                    } else {
                        $conn->rollback();
                        $this->redirect(['Controller' => 'Devices', 'action' => 'setQcMirkotic' . '/' . \UrlUtil::_encodeUrl($device_id) . '/' . \UrlUtil::_encodeUrl($user_id)]);
                    }
                } else {
                    $conn->rollback();
                    $this->redirect(['Controller' => 'Devices', 'action' => 'setQcMirkotic' . '/' . \UrlUtil::_encodeUrl($device_id) . '/' . \UrlUtil::_encodeUrl($user_id)]);
                }
            }
        }
        $files = $this->Devices->find('all', ['order' => ['Devices.created' => 'DESC']]);
        $back_group = $this->DeviceFiles->find()->where(['device_id' => $device_id, 'type' => 1, 'active_flag !=' => 1])->select(['id', 'device_id', 'path'])->combine('id', 'path')->toArray();
        $logo = $this->DeviceFiles->find()->where(['device_id' => $device_id, 'type' => 2, 'active_flag !=' => 1])->select(['id', 'device_id', 'path'])->combine('id', 'path')->toArray();
        $adv = $this->Advs->find()->where(['device_id' => $device_id, 'active_flag !=' => 1])->select(['id', 'device_id', 'path', 'url_link'])->toArray();
        $filesRowNum = $files->count();
        $this->set('files', $files);
        $this->set('filesRowNum', $filesRowNum);
        $apt = $this->radompassWord();
        $this->set(compact('logo', 'back_group', 'device', 'device_id', 'user_id', 'apt', 'adv'));
    }

    /**
     * ***********
     *
     ************************
     */
    public function checkPassword()
    {
        $this->autoRender = false;
        if ($this->request->getData()) {
            if ($this->request->getData('device_id')) {
                $query = $this->Devices->find('all', array(
                        'recursive' => -1,
                        'conditions' => array(
                            'id' => $this->request->getData('device_id'),
                            'apt_device_number' => $this->request->getData('password_x'),
                            'delete_flag !=' => DELETED
                        ))
                );
                $number = $query->count();
                if ($number > 0) {
                    die(json_encode(true));
                } else {
                    die(json_encode(false));
                }
            } else {
                die(json_encode(true));
            }
        }
    }

    /**
     ***************
     *  addLogVoucher
     *
     * ******************************
     */
    public function addLogVoucher()
    {
        $conn = ConnectionManager::get('default');
        $conn->begin();
        $this->loadModel('PartnerVouchers');
        $this->loadModel('Partners');
        $this->autoRender = false;
        $chk = false;
        if ($this->request->data) {
            $partner_id = $this->request->data['partner_id'];
            $partner = $this->Partners->get($partner_id);
            $data_save_pa = array(
                'name' => isset($this->request->data['name']) ? $this->request->data['name'] : '',
                'birthday' => isset($this->request->data['birthday']) ? $this->request->data['birthday'] : '',
                'phone' => isset($this->request->data['phone']) ? $this->request->data['phone'] : '',
                'address' => isset($this->request->data['address']) ? $this->request->data['address'] : '',
                'device_id' => isset($this->request->data['device_id']) ? $this->request->data['device_id'] : '',
                'user_id' => isset($this->request->data['user_id']) ? $this->request->data['user_id'] : '',
                'campaign_group_id' => isset ($this->request->data['campaign_group_id']) ? $this->request->data['campaign_group_id'] : '',
            );
            if (empty($partner)) {
                $partner = $this->Partners->newEntity();
                $partner = $this->Partners->patchEntity($partner, $data_save_pa);
            } else {
                $partner = $this->Partners->patchEntity($partner, $data_save_pa);
            }
            if (empty($partner->errors())) {
                if (!$this->Partners->save($partner)) {
                    $chk = true;
                }
            }
            $partner_voucher = $this->PartnerVouchers->find()->where(['partner_id' => $partner_id])->first();
            if (!empty($partner_voucher)) {
                $partner_v_id = $partner_voucher['id'];
                $voucher_pa = $this->PartnerVouchers->get($partner_v_id);
                $voucher_pa = $this->Partners->patchEntity($voucher_pa, $data_save_pa);
                if (empty($voucher_pa->errors())) {
                    if (!$this->PartnerVouchers->save($voucher_pa)) {
                        $chk = true;
                    }
                }
            } else {
                $data_save_pa['partner_id'] = $partner_id;
                $data_save_pa['confirm'] = 0;
                $pa_vou = $this->PartnerVouchers->newEntity();
                $pa_vou = $this->PartnerVouchers->patchEntity($pa_vou, $data_save_pa);
                if (empty($pa_vou->errors())) {
                    if (!$this->PartnerVouchers->save($pa_vou)) {
                        $chk = true;
                    }
                }
            }
            if (!$chk) {
                $conn->commit();
                die(json_encode(true));
            } else {
                $conn->rollback();
                die(json_encode(false));
            }
        }
    }

    public function viewQcVoucher($device_id)
    {
        if (isset($device_id)) {
            $device_id = \UrlUtil::_decodeUrl($device_id);
            if (!$this->Devices->exists(['Devices.id' => $device_id])) {
                return $this->redirect(['action' => 'index']);
            }
            $infor_devices = $this->Devices->get($device_id);

            if (!empty($infor_devices)) {
                $apt = $infor_devices->apt_key;
                if (isset($infor_devices->type_adv) && $infor_devices->type_adv == 2) {
                    $url_buil = URL . 'Devices/adv/' . $apt;
                    if ($infor_devices->type == 1) {
                        $auth = $infor_devices->auth_target;
                        $infor_devices->auth_target = $this->getAuth($auth, $url_buil);
                    } else {
                        $infor_devices->link_orig = $url_buil;
                    }
                }
                if (isset($infor_devices->campaign_group_id) && $infor_devices->campaign_group_id != '') {
                    $device_campaign = $this->CampaignGroups->find()
                        ->where(['id' => $infor_devices->campaign_group_id, 'delete_flag !=' => DELETED])
                        ->first();
                    if (!empty($device_campaign)) {
                        $infor_devices->langdingpage_id = $device_campaign->langdingpage_id;
                        $infor_devices->path = $device_campaign->path;
                        $infor_devices->tile_name = $device_campaign->tile_name;
                        $infor_devices->apt_device_number = $device_campaign->number_pass;
                        $infor_devices->message = $device_campaign->message;
                        $infor_devices->slogan = $device_campaign->slogan;
                        $infor_devices->tile_congratulations = $device_campaign->tile_congratulations;
                        $infor_devices->title_connect = $device_campaign->title_connect;
                        $infor_devices->hidden_connect = $device_campaign->hidden_connect;
                        $infor_devices->path_logo = $device_campaign->path_logo;
                    }
                } elseif (isset($infor_devices->adgroup_id) && $infor_devices->adgroup_id != '') {
                    $device_group = $this->DeviceGroups->find()
                        ->where(['adgroup_id' => $infor_devices->adgroup_id, 'delete_flag !=' => DELETED])
                        ->first();
                    if (!empty($device_group)) {
                        $infor_devices->langdingpage_id = $device_group->langdingpage_id;
                        $infor_devices->path = $device_group->path;
                        $infor_devices->tile_name = $device_group->tile_name;
                        $infor_devices->apt_device_number = $device_group->number_pass;
                        $infor_devices->message = $device_group->message;
                        $infor_devices->slogan = $device_group->slogan;
                        $infor_devices->title_connect = $device_group->title_connect;
                        $infor_devices->hidden_connect = $device_group->hidden_connect;
                        $infor_devices->path_logo = $device_group->path_logo;
                    }
                }
            }
            $this->set(compact('infor_devices'));
        } else {
            return $this->redirect(['action' => 'index']);
        }
    }

    public function generateRandomString($length = 12)
    {

        $characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    /**
     ************************************************
     * addLogPartner method
     *
     * @param array data
     *
     * @return void saved data to partner
     *************************************************
     */
    public function addLogPartner()
    {
        $conn = ConnectionManager::get('default');
        $conn->begin();
        $this->autoRender = false;
        $this->loadModel('Partners');
        if ($this->request->data) {
            $partner_id = $this->request->data['partner_id'];
            if ($partner_id != '') {
                $partner = $this->Partners->get($partner_id);
                $partner = $this->Partners->patchEntity($partner, $this->request->data);
                if (empty($partner->errors())) {
                    if ($this->Partners->save($partner)) {
                        $conn->commit();
                        die(json_encode(true));
                    } else {
                        $conn->rollback();
                        die(json_encode(false));
                    }
                }
            } else {
                die(json_encode(false));
            }
        }
    }

    public function edit($id = null)
    {
        $id = \UrlUtil::_decodeUrl($id);
        $conn = ConnectionManager::get('default');
        $conn->begin();
        if (!$this->Devices->exists(['id' => $id])) {
            return $this->redirect(array('controller' => 'Devices', 'action' => 'index'));
        }
        $device = $this->Devices->get($id, [
            'contain' => []
        ]);
        $campaign_id = $this->CampaignGroups->find()->select()->where(['delete_flag !=' => 1])->combine('id', 'device_id')->toArray();
        $list_campaign = array();
        if (!empty($campaign_id)) {
            foreach ($campaign_id as $k => $vl) {
                $vl = json_decode($vl);
                foreach ($vl as $key => $item) {
                    if ($id == $item) {
                        $list_campaign[$k][$key] = $k;
                    }
                }
            }
            if (!empty($list_campaign)) {
                $list_campaign = call_user_func_array('array_merge', $list_campaign);
                $list_campaign = array_unique($list_campaign);
                $campaign_name = $this->CampaignGroups->find()->select()
                    ->where([
                        'id IN' => $list_campaign,
                        'delete_flag !=' => 1,
                    ])->combine('id', 'name')->toArray();
                $campaign_name = implode(',', $campaign_name);
            }
        }
        $this->getAllData();
        if ($this->request->getData()) {
            $device = $this->Devices->patchEntity($device, $this->request->getData());
            if (empty($device->errors())) {
                if ($this->Devices->save($device)) {
                    $conn->commit();
                    $this->Flash->success(__('The user has been saved.'));
                    return $this->redirect(['action' => 'index']);
                } else {
                    $conn->rollback();
                    $this->Flash->error(__('The device could not be saved. Please, try again.'));
                    return $this->redirect(['action' => 'edit' . '/' . \UrlUtil::_encodeUrl($id)]);
                }
            } else {
                $conn->rollback();
                $this->Flash->error(__('The device could not be saved. Please, try again.'));
                return $this->redirect(['action' => 'edit' . '/' . \UrlUtil::_encodeUrl($id)]);
            }
        }
        $Adgroups = array();
        if (!empty($device['adgroup_id'])) {
            $Adgroups = $this->Adgroups->find()->where(['id' => $device['adgroup_id']])->combine('id', 'name')->toArray();
        }
        $this->set(compact('device', 'Adgroups', 'campaign_name'));
        $this->set('_serialize', ['device']);
    }

    public function loadLogPartnerHistories()
    {
        ob_start();
        $this->autoRender = false;
        $id = $this->request->data['id'];
        if (!$this->Devices->exists(['id' => $id])) {
            return $this->redirect(array('controller' => 'Devices', 'action' => 'index'));
        }
        $device = $this->Devices->get($id, [
            'contain' => []
        ]);
        // render to a variable
        $campaign_id = $this->CampaignGroups->find()->select()->where(['delete_flag !=' => 1])->combine('id', 'device_id')->toArray();
        $list_campaign = array();
        $campaign_name = '';
        if (!empty($campaign_id)) {
            foreach ($campaign_id as $k => $vl) {
                $vl = json_decode($vl);
                foreach ($vl as $key => $item) {
                    if ($id == $item) {
                        $list_campaign[$k][$key] = $k;
                    }
                }
            }
            if (!empty($list_campaign)) {
                $list_campaign = call_user_func_array('array_merge', $list_campaign);
                $list_campaign = array_unique($list_campaign);
                $campaign_name = $this->CampaignGroups->find()->select()
                    ->where([
                        'id IN' => $list_campaign,
                        'delete_flag !=' => 1,
                    ])->combine('id', 'name')->toArray();
                $campaign_name = implode(',', $campaign_name);
            }
        }
        $Adgroups = array();
        if (!empty($device['adgroup_id'])) {
            $Adgroups = $this->Adgroups->find()->where(['id' => $device['adgroup_id']])->combine('id', 'name')->toArray();
        }
        $users = $this->Users->find()
            ->where(['Users.delete_flag !=' => DELETED])
            ->select(['Users.id', 'Users.username'])
            ->order(['Users.id' => 'ASC'])
            ->combine('id', 'username')
            ->toArray();
        $builder = $this->viewBuilder();
        $builder->autoLayout(false);
        $builder->template('/Element/device_groups/modal-02');
        $builder->helpers(['Html']);
        $view = $builder->build([
            'device' => $device,
            'Adgroups' => $Adgroups,
            'campaign_name' => $campaign_name,
            'userData' => $this->Auth->user(),
            'users' => $users
        ]);
        echo $view->render();
    }


    private function getFlagInAdgroup($ladingpage_id = null, $id_device = null)
    {
        $ad_group = $this->Adgroups->find()
            ->select(['device_id'])
            ->where(['delete_flag !=' => DELETED, 'langdingpage_id' => 3])
            ->combine('id', 'device_id')
            ->toArray();
        if (!empty($ad_group)) {
            $flag_check = false;
            foreach ($ad_group as $k => $vl) {
                foreach (json_decode($vl) as $key => $item) {
                    if ($item == $id_device) {
                        $flag_check = true;
                    }
                }
            }
            if ($flag_check) {
                $flag_check_isexit_partner = 1;
            } else {
                if ($ladingpage_id == 3) {
                    $flag_check_isexit_partner = 1;
                } else {
                    $flag_check_isexit_partner = 2;
                }
            }
        } else {
            if ($ladingpage_id == 3) {
                $flag_check_isexit_partner = 1;
            } else {
                $flag_check_isexit_partner = 2;
            }
        }
        return $flag_check_isexit_partner;
    }

    public function updateLogoDevice()
    {
        $this->autoRender = false;
        $data = $this->Devices->find()->select(['id', 'path_logo', 'image_logo'])->hydrate(false)->where(['delete_flag !=' => 1])->toArray();
        foreach ($data as $datum) {
            $name = explode(',', $datum['image_logo']);
            foreach (explode(',', $datum['path_logo']) as $k => $item) {
                $new_file[] = array(
                    'device_id' => $datum['id'],
                    'path' => $item,
                    'name' => $name[$k],
                    'type' => 2
                );
            }
        }

        foreach ($new_file as $item) {
            $new_back_group = $this->DeviceFiles->newEntity();
            $new_back_group = $this->DeviceFiles->patchEntity($new_back_group, $item);

            if (!$this->DeviceFiles->save($new_back_group)) {
                return true;
            }
        }
    }

    public function updateBakDevice()
    {
        $this->autoRender = false;
        $data = $this->Devices->find()->select(['id', 'path', 'image_backgroup'])->hydrate(false)->where(['delete_flag !=' => 1])->toArray();
        foreach ($data as $datum) {
            $name = explode(',', $datum['image_backgroup']);
            foreach (explode(',', $datum['path']) as $k => $item) {
                $new_file[] = array(
                    'device_id' => $datum['id'],
                    'path' => $item,
                    'name' => $name[$k],
                    'type' => 1
                );
            }
        }
        $connection = ConnectionManager::get('default');
        $connection->execute('TRUNCATE TABLE device_files');
        foreach ($new_file as $item) {
            $new_back_group = $this->DeviceFiles->newEntity();
            $new_back_group = $this->DeviceFiles->patchEntity($new_back_group, $item);
            if (!$this->DeviceFiles->save($new_back_group)) {
                return true;
            }
        }
    }

    public function deleteBackgroud()
    {
        $this->autoRender = false;
        if ($this->request->data) {
            $id_file = $this->request->data['id'];
            if (isset($id_file)) {
                $backgroud = $this->DeviceFiles->get($id_file);
                if (!empty($backgroud)) {
                    $backgroud->active_flag = 1;
                    if ($this->DeviceFiles->save($backgroud)) {
                        die(json_encode(true));
                    } else {
                        die(json_encode(false));
                    }
                } else {
                    die(json_encode(false));
                }
            } else {
                die(json_encode(false));
            }
        }
    }

    public function upload()
    {
        die(json_encode(true));
    }

    public function adv($id = null)
    {
        $apt = explode('&tok=', $id);
        $device = $this->Devices->find()->where(['apt_key' => $apt[0], 'delete_flag !=' => 1])->first()->toArray();
        $device_id = $device['id'];
        $adv = $this->Advs->find()->where(['device_id' => $device_id, 'active_flag !=' => 1])->select(['id', 'device_id', 'path', 'url_link'])->toArray();
        $paths = Hash::combine($adv, '{n}.id', '{n}.path');
        $urls = Hash::combine($adv, '{n}.id', '{n}.url_link');
        foreach ($paths as $k => $vl) {
            $paths[$k] = $vl . '|___|' . $urls[$k];
        }
        $random = array();
        if (count($paths) > 3) {
            $random = $this->array_random_assoc($paths, 4);
        }

        if (!empty($random)) {
            $paths = array();
            $urls = array();
            foreach ($random as $k => $vl) {
                $vl = explode('|___|', $vl);
                $urls[$k] = $vl[1];
                $paths[$k] = $vl[0];
            }
        } else {
            $paths = Hash::combine($adv, '{n}.id', '{n}.path');
            $urls = Hash::combine($adv, '{n}.id', '{n}.url_link');
        }
        $this->set(compact('device', 'adv', 'urls', 'paths'));
    }

    public function deleteAdv()
    {
        $this->autoRender = false;
        if ($this->request->data) {
            $id_file = $this->request->data['id'];
            if (isset($id_file)) {
                $backgroud = $this->Advs->get($id_file);
                if (!empty($backgroud)) {
                    $backgroud->active_flag = 1;
                    if ($this->Advs->save($backgroud)) {
                        die(json_encode(true));
                    } else {
                        die(json_encode(false));
                    }
                } else {
                    die(json_encode(false));
                }
            } else {
                die(json_encode(false));
            }
        }
    }
}

