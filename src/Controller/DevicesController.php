<?php

namespace App\Controller;

use App\Controller\AppController;
use Cake\Datasource\ConnectionManager;
use Cake\Event\Event;

/**
 * Devices Controller
 *
 * @property \App\Model\Table\DevicesTable $Devices
 *
 * @method \App\Model\Entity\Device[] paginate($object = null, array $settings = [])
 */
class DevicesController extends AppController
{
    public function beforeRender(Event $event)
    {
        parent::beforeRender($event); // TODO: Change the autogenerated stub
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $devices = $this->Devices->find('all',[
            'contain'  => ['Users' => function ($q) {
                return $q
                    ->where(['Devices.delete_flag !=' => 1 ]);
            }]
        ])->toArray();
        $this->set(compact('devices'));


    }

    /**
     * View method
     *
     * @param string|null $id Device id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $device = $this->Devices->get($id, [
            'contain' => ['Users']
        ]);

        $this->set('device', $device);
        $this->set('_serialize', ['device']);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $conn = ConnectionManager::get('default');
        $conn->begin();
        $this->loadModel('Users');
        $users = $this->Users->find('all')
            ->where(['Users.delete_flag !=' => DELETED])
            ->select(['id', 'username'])
            ->order(['Users.id' => 'DESC'])
            ->combine('id', 'username')
            ->toArray();
        $device = $this->Devices->newEntity();
        if ($this->request->is('post')) {
            $device = $this->Devices->patchEntity($device, $this->request->getData());
            $device->delete_flag = UN_DELETED;
            if (empty($device->errors())) {
                if ($this->Devices->save($device)) {
                    $conn->commit();
                    $this->Flash->success(__('The device has been saved.'));
                    return $this->redirect(['action' => 'index']);
                } else {
                    $conn->rollback();
                    $this->Flash->error(__('The device could not be saved. Please, try again.'));
                    return $this->redirect(['action' => 'add']);
                }
            } else {
                $conn->rollback();
                $this->Flash->error(__('The device could not be saved. Please, try again.'));
                return $this->redirect(['action' => 'add']);
            }
        }
        $this->set(compact('users', 'device'));
        //return $this->redirect(['action' => 'index']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Devices id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $conn = ConnectionManager::get('default');
        $conn->begin();
        if (!$this->Devices->exists($id)) {
            $this->redirect(array('controller' => 'Devices', 'action' => 'index'));
        }
        $device = $this->Devices->get($id, [
            'contain' => []
        ]);
        $this->getAllData();
        if ($this->request->getData()) {
            $device = $this->Devices->patchEntity($device, $this->request->getData());
            if (empty($device->errors())) {
                if ($this->Devices->save($device)) {
                    $conn->commit();
                    $this->Flash->success(__('The user has been saved.'));
                    return $this->redirect(['action' => 'index']);
                } else {
                    $conn->rollback();
                    $this->Flash->error(__('The device could not be saved. Please, try again.'));
                    return $this->redirect(['action' => 'edit'.'/'.$id]);
                }
            } else {
                $conn->rollback();
                $this->Flash->error(__('The device could not be saved. Please, try again.'));
                return $this->redirect(['action' => 'edit'.'/'.$id]);
            }
        }
        $this->set(compact('device'));
        $this->set('_serialize', ['device']);
    }

    /**
     * Delete method
     *
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete()
    {
        $this->autoRender = false;
        $conn = ConnectionManager::get('default');
        $conn->begin();
        $this->request->allowMethod(['post', 'delete']);
        if ($this->request->getData()) {
            $device = $this->Devices->get($this->request->getData('id'));
            $device->delete_flag = true;
            if ($this->Devices->save($device)) {
                $conn->commit();
                die(json_encode(true));
            } else {
                $conn->rollback();
                die(json_encode(false));
            }
        }
    }

    /**
     * load method
     *
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function load()
    {
        $this->autoRender = false;
        if ($this->request->getData()) {
            $device = $this->Devices->find('all')
                ->where(['Devices.id' => $this->request->getData('id'),
                    'Devices.delete_flag !=' => DELETED])
                ->select(['Devices.id',
                    'name',
                    'apt_key',
                    'created',
                    'pass_apt_key',
                    ])
                ->first()
                ->toArray();
            if ($device) {
                die(json_encode($device));
            }
        }

    }

    /**
     * isNameEditlExist method
     *
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function isNameEditlExist()
    {
        $this->autoRender = false;
        if ($this->request->getData()) {
            if ($this->request->getData('backup_name') != $this->request->getData('name')) {
                $query = $this->Devices->find('all', array(
                        'recursive' => -1,
                        'conditions' => array(
                            'name' => $this->request->getData('name'),
                            'delete_flag !=' => DELETED
                        ))
                );
                $number = $query->count();
                if (!$number) {
                    die(json_encode(true));
                } else {
                    die(json_encode(false));
                }
            } else {
                die(json_encode(true));
            }
        }
    }

    /**
     * isNameExistAdd method
     *
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function isNameExistAdd()
    {
        $this->autoRender = false;
        if ($this->request->getData()) {
            $query = $this->Devices->find('all', array(
                    'recursive' => -1,
                    'conditions' => array(
                        'name' => $this->request->getData('name'),
                        'delete_flag !=' => DELETED
                    ))
            );
            $number = $query->count();
            if (!$number) {
                die(json_encode(true));
            } else {
                die(json_encode(false));
            }
        }
    }

    /**
     * setNewAdvertise method
     *
     * @param null $id
     * @return \Cake\Http\Response|void
     */
    public function setNewAdvertise($id = null)
    {
        $this->getAllData();
    }

    public function detailDevice($id = null)
    {
        $this->getAllData();
        if (!$this->Devices->exists($id)) {
            $this->redirect(['Controller' => 'Devices', 'action' => 'index']);
        }
        $device = $this->Devices->get($id,[
            'contain' =>[]
        ]);
        $this->set(compact('device'));
    }
}
