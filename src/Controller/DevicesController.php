<?php

namespace App\Controller;

use App\Controller\AppController;
use App\Model\Entity\User;
use Cake\Datasource\ConnectionManager;
use Cake\Event\Event;

/**
 * Devices Controller
 *
 * @property \App\Model\Table\LangdingDevicesTable $LangdingDevices
 * @property \App\Model\Table\DevicesTable $Devices
 * @property \App\Model\Table\LogsTable $Logs
 * @property \App\Model\Table\FileAttachmentsTable $FileAttachments
 *
 * @method \App\Model\Entity\Device[] paginate($object = null, array $settings = [])
 *
 *  * @property  \App\Controller\Component\UploadImageComponent $UploadImage
 * * @property \App\Model\Table\PartnersTable $Partners
 */
class DevicesController extends AppController
{
    public function beforeRender(Event $event)
    {
        parent::beforeRender($event); // TODO: Change the autogenerated stub
    }

    public function initialize()
    {
        parent::initialize();

        // Include the FlashComponent
        $this->loadComponent('Flash');
        $this->loadComponent('UploadImage');

        // Load Files model
        $this->loadModel('FileAttachments');
        $this->loadModel('Logs');
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $login = $this->Auth->user();
        if ($login['role'] == User::ROLE_ONE) {
            $devices = $this->Devices->find('all', [
                'contain' => ['Users' => function ($q) {
                    return $q
                    ->select(['Users.id', 'Users.username'])
                        ->where(['Users.delete_flag !=' => 1])
                        ->hydrate(false);
                },
                'Partners' => function($q) {
                    return $q
                        ->select([
                            'Partners.id','Partners.name','Partners.device_id'
                        ])
                        ;
                }],
            ])->toArray();
        } else {
            $devices = $this->Devices->find('all', [
                'contain' => ['Users' => function ($q) {
                    return $q
                        ->where([
                            'Devices.delete_flag !=' => 1,
                        ]);
                },
                'Partners' => function($q) {
                return $q
                    ->select([
                        'Partners.id','Partners.device_id',
                    ])
                    ;
                }],
                'conditions' => [
                    'Devices.user_id ' => $login['id']
                ]
            ])->toArray();
        }
        $this->set(compact('devices'));


    }


    /**
     *
     */
    public function loadDeviceNoLangdingpage()
    {
        $login = $this->Auth->user();
        if ($login['role'] == User::ROLE_ONE) {
            $devices = $this->Devices->find('all', [
                'contain' => ['Users' => function ($q) {
                    return $q
                        ->where(['Devices.delete_flag !=' => 1]);
                }],
                'conditions' => array(
                    'Devices.status ' => NO_LANDING
                )
            ])->toArray();
        } else {
            $devices = $this->Devices->find('all', [
                'contain' => ['Users' => function ($q) {
                    return $q
                        ->where([
                            'Devices.delete_flag !=' => 1,
                        ]);
                }],
                'conditions' => [
                    'Devices.user_id ' => $login['id'],
                    'Devices.status ' => NO_LANDING
                ],
            ])->toArray();
        }
        $this->set(compact('devices'));
        $this->render('/Devices/index');
    }

    /**
     *
     */
    public function loadDeviceHasLangdingpage()
    {
        $login = $this->Auth->user();
        if ($login['role'] == User::ROLE_ONE) {
            $devices = $this->Devices->find('all', [
                'contain' => ['Users' => function ($q) {
                    return $q
                        ->where(['Devices.delete_flag !=' => 1]);
                }],
                'conditions' => array(
                    'Devices.status ' => HAS_LANDING
                )
            ])->toArray();
        } else {
            $devices = $this->Devices->find('all', [
                'contain' => ['Users' => function ($q) {
                    return $q
                        ->where([
                            'Devices.delete_flag !=' => 1,
                        ]);
                }],
                'conditions' => [
                    'Devices.user_id ' => $login['id'],
                    'Devices.status ' => HAS_LANDING
                ],
            ])->toArray();
        }
        $this->set(compact('devices'));
        $this->render('/Devices/index');
    }

    /**
     * View method
     *
     * @param string|null $id Device id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $device = $this->Devices->get($id, [
            'contain' => ['Users']
        ]);

        $this->set('device', $device);
        $this->set('_serialize', ['device']);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $conn = ConnectionManager::get('default');
        $conn->begin();
        $this->loadModel('Users');
        $users = $this->Users->find('all')
            ->where(['Users.delete_flag !=' => DELETED])
            ->select(['id', 'username'])
            ->order(['Users.id' => 'DESC'])
            ->combine('id', 'username')
            ->toArray();
        $device = $this->Devices->newEntity();
        if ($this->request->is('post')) {
            $device = $this->Devices->patchEntity($device, $this->request->getData());
            $device->delete_flag = UN_DELETED;
            if (empty($device->errors())) {
                if ($this->Devices->save($device)) {
                    $conn->commit();
                    $this->Flash->success(__('The device has been saved.'));
                    return $this->redirect(['action' => 'index']);
                } else {
                    $conn->rollback();
                    $this->Flash->error(__('The device could not be saved. Please, try again.'));
                    return $this->redirect(['action' => 'add']);
                }
            } else {
                $conn->rollback();
                $this->Flash->error(__('The device could not be saved. Please, try again.'));
                return $this->redirect(['action' => 'add']);
            }
        }
        $this->set(compact('users', 'device'));
        //return $this->redirect(['action' => 'index']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Devices id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $conn = ConnectionManager::get('default');
        $conn->begin();
        if (!$this->Devices->exists($id)) {
            $this->redirect(array('controller' => 'Devices', 'action' => 'index'));
        }
        $device = $this->Devices->get($id, [
            'contain' => []
        ]);
        $this->getAllData();
        if ($this->request->getData()) {
            $device = $this->Devices->patchEntity($device, $this->request->getData());
            if (empty($device->errors())) {
                if ($this->Devices->save($device)) {
                    $conn->commit();
                    $this->Flash->success(__('The user has been saved.'));
                    return $this->redirect(['action' => 'index']);
                } else {
                    $conn->rollback();
                    $this->Flash->error(__('The device could not be saved. Please, try again.'));
                    return $this->redirect(['action' => 'edit' . '/' . $id]);
                }
            } else {
                $conn->rollback();
                $this->Flash->error(__('The device could not be saved. Please, try again.'));
                return $this->redirect(['action' => 'edit' . '/' . $id]);
            }
        }
        $this->set(compact('device'));
        $this->set('_serialize', ['device']);
    }

    /**
     * Delete method
     *
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete()
    {
        $this->autoRender = false;
        $conn = ConnectionManager::get('default');
        $conn->begin();
        $this->request->allowMethod(['post', 'delete']);
        if ($this->request->getData()) {
            $device = $this->Devices->get($this->request->getData('id'));
            $device->delete_flag = true;
            if ($this->Devices->save($device)) {
                $conn->commit();
                die(json_encode(true));
            } else {
                $conn->rollback();
                die(json_encode(false));
            }
        }
    }

    /**
     * load method
     *
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function load()
    {
        $this->autoRender = false;
        if ($this->request->getData()) {
            $device = $this->Devices->find('all')
                ->where(['Devices.id' => $this->request->getData('id'),
                    'Devices.delete_flag !=' => DELETED])
                ->select(['Devices.id',
                    'name',
                    'apt_key',
                    'created',
                    'pass_apt_key',
                ])
                ->first()
                ->toArray();
            if ($device) {
                die(json_encode($device));
            }
        }

    }

    /**
     * isNameEditlExist method
     *
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function isNameEditlExist()
    {
        $this->autoRender = false;
        if ($this->request->getData()) {
            if ($this->request->getData('backup_name') != $this->request->getData('name')) {
                $query = $this->Devices->find('all', array(
                        'recursive' => -1,
                        'conditions' => array(
                            'name' => $this->request->getData('name'),
                            'delete_flag !=' => DELETED
                        ))
                );
                $number = $query->count();
                if (!$number) {
                    die(json_encode(true));
                } else {
                    die(json_encode(false));
                }
            } else {
                die(json_encode(true));
            }
        }
    }

    /**
     * isNameExistAdd method
     *
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function isNameExistAdd()
    {
        $this->autoRender = false;
        if ($this->request->getData()) {
            $query = $this->Devices->find('all', array(
                    'recursive' => -1,
                    'conditions' => array(
                        'name' => $this->request->getData('name'),
                        'delete_flag !=' => DELETED
                    ))
            );
            $number = $query->count();
            if (!$number) {
                die(json_encode(true));
            } else {
                die(json_encode(false));
            }
        }
    }

    /**
     * setNewAdvertise method
     *
     * @param null $id
     * @return \Cake\Http\Response|void
     */
    public function setNewAdvertise($id = null)
    {
        $this->getAllData();
    }

    public function detailDevice($id = null)
    {
        $this->getAllData();
        if (!$this->Devices->exists($id)) {
            $this->redirect(['Controller' => 'Devices', 'action' => 'index']);
        }
        $device = $this->Devices->get($id, [
            'contain' => []
        ]);
        $this->set(compact('device'));
    }

    /**
     * setQc method
     *
     * @param null $device_id
     * @param null $user_id
     * @return \Cake\Http\Response|void
     * @internal param null $id
     */
    public function setQc($device_id = null, $user_id = null)
    {
        $conn = ConnectionManager::get('default');
        $conn->begin();
        $this->loadModel('LangdingDevices');
        if (!$this->Users->exists($user_id)) {
            $this->redirect(['Controller' => 'Devices', 'action' => 'index']);
        }
        if (!$this->Devices->exists($device_id)) {
            $this->redirect(['Controller' => 'Devices', 'action' => 'index']);
        }
        $device = $this->Devices->get($device_id, [
            'contain' => []
        ]);
        if ($this->request->is('post')) {
            if (!empty($this->request->data['file']['name'])) {
                // upload the file to the server
                $file = array(
                    'file' => $this->request->data['file']
                );
                $fileOK = $this->UploadImage->uploadFiles('upload/files', $file);
                unset($this->request->data['file']);
                unset($this->request->data['device_id']);
                if(array_key_exists('urls', $fileOK)) {
                    $device->path = $fileOK['urls'][0];
                    $device->image_backgroup = $file['file']['name'];
                }

                $device = $this->Devices->patchEntity($device, $this->request->data);
                if (empty($device->errors())) {
                    if ($this->Devices->save($device)) {
                        $conn->commit();
                        $this->redirect(['action' => 'index']);
                    } else {
                        $conn->rollback();
                        $this->redirect(['Controller' => 'Devices', 'action' => 'setQc' . '/' . $this->request->getData('device_id') . '/' . $user_id]);
                    }
                } else {
                    $conn->rollback();
                    $this->redirect(['Controller' => 'Devices', 'action' => 'setQc' . '/' . $this->request->getData('device_id') . '/' . $user_id]);
                }
            } else {
                unset($this->request->data['file']);
                $device = $this->Devices->patchEntity($device, $this->request->data);
                if (empty($device->errors())) {
                    if ($this->Devices->save($device)) {
                        $conn->commit();
                        $this->redirect(['action' => 'index']);
                    } else {
                        $conn->rollback();
                        $this->redirect(['Controller' => 'Devices', 'action' => 'setQc' . '/' . $this->request->getData('device_id') . '/' . $user_id]);
                    }
                } else {
                    $conn->rollback();
                    $this->redirect(['Controller' => 'Devices', 'action' => 'setQc' . '/' . $this->request->getData('device_id') . '/' . $user_id]);
                }
            }
        }
        $files = $this->Devices->find('all', ['order' => ['Devices.created' => 'DESC']]);
        $filesRowNum = $files->count();
        $this->set('files',$files);
        $this->set('filesRowNum',$filesRowNum);
        $this->set(compact('device', 'device_id', 'user_id'));
    }

    /**
     * @param null $device_id
     * @internal param null $user_id
     * @internal param null $langdingpage_id
     */
    public function viewQc($device_id = null)
    {
        $infor_devices = $this->Devices->get($device_id);
        $this->set(compact('infor_devices'));
    }


    /**
     * Add info users
     * @table logs
     *
     * @return json
     *
     */
    public function addLog()
    {
        $this->autoRender= false;
        if ($this->request->getData()) {
            $log = $this->Logs->newEntity();
            if ($this->request->is('post')) {
                $log = $this->Logs->patchEntity($log, $this->request->data);
                if (empty($log->errors())) {
                    if ($this->Logs->save($log)) {
                        die(json_encode(true));
                    } else {
                        die(json_encode(false));
                    }
                }
            }
        }
    }


    /**
     * Add method
     *
     * @param null $apt_key
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function addNewDevice($apt_key = null)
    {
        $this->autoRender = false;
        $conn = ConnectionManager::get('default');
        $conn->begin();
        $this->loadModel('Partners');
        if ($apt_key != '') {
            $this->autoRender= false;
            $apt_key_check = $this->Devices->find()->where(
                [
                    'apt_key' => $apt_key,
                    'delete_flag !=' => DELETED
                ])
                ->select()
                ->hydrate(true)
                ->first();
            $chk = false;
            if (!empty($apt_key_check)) {
                $partner = $this->Partners->find()->where(
                    array(
                        'device_id' => $apt_key_check->id,
                        'client_mac' => isset($this->request->data['client_mac']) ? $this->request->data['client_mac']:''
                    ))
                    ->first();
                $query = $this->Partners->find('all', [])->count();
                if (empty($partner)) {
                    $save_new_pa = array(
                        'device_id' => $apt_key_check->id,
                        'client_mac' => isset($this->request->data['client_mac']) ? $this->request->data['client_mac']: '',
                        'auth_target' => isset($this->request->data['auth_target']) ? $this->request->data['auth_target']:'',
                        'num_clients_connect' => 1,
                        'name' => PARTNER.($query + 1),
                        'apt_device_pass' => $this->radompassWord()
                    );
                    $new_partner = $this->Partners->newEntity();
                    $new_partner = $this->Partners->patchEntity($new_partner, $save_new_pa);
                    if (empty($new_partner->errors())) {
                        if (!$this->Partners->save($new_partner)) {
                            $chk = true;
                        }
                    }
                } else {
                    $data_update = array(
                        'num_clients_connect' => $partner['num_clients_connect'] + 1,
                        'auth_target' => isset($this->request->data['auth_target']) ? $this->request->data['auth_target']:'',
                        'apt_device_pass' => $this->radompassWord()
                    );
                    $partner = $this->Partners->patchEntity($partner, $data_update);
                    if (empty($partner->errors())){
                        if (!$this->Partners->save($partner)) {
                            $chk = true;
                        }
                    }
                }
                $device = $this->Devices->patchEntity($apt_key_check, $this->request->data);
                if (empty($device->errors())) {
                    if (!$this->Devices->save($device)) {
                        $chk = true;
                    }
                }
                if (!$chk) {
                    $conn->commit();
                    $this->redirect(['plugin' => null, 'controller' => 'Devices', 'action' => 'view_qc' . '/' . $device->id]);
                } else {
                    $conn->rollback();
                }
            } else {
                $query = $this->Users->find('all', [])->count();
                $users = $this->Users->newEntity();
                $data_user = [
                    'username' => USER.($query + 1),
                    'email' => USER.($query + 1).'@wifimedia.com',
                    'password' => '123456',
                    'delete_flag' => UN_DELETED,
                    'role' => User::ROLE_TOW
                ];
                $device = $this->Devices->newEntity();
                $device = $this->Devices->patchEntity($device, $this->request->data);
                $device->delete_flag = UN_DELETED;
                $device->status = UN_DELETED;
                $device->name = DEVICE.($query + 1);
                $device->apt_device_number = $this->radompassWord();
                $device->apt_key = isset($this->request->data['gateway_mac']) ? $this->request->data['gateway_mac'] : $apt_key;
                $users = $this->Users->patchEntity($users, $data_user);
                $query = $this->Partners->find('all', [])->count();
                $data_new_par = array(
                    'client_mac' => isset($this->request->data['client_mac']) ? $this->request->data['client_mac']:'',
                    'auth_target' => isset($this->request->data['auth_target']) ? $this->request->data['auth_target']:'',
                    'num_clients_connect' => 1,
                    'name' => PARTNER.($query + 1),
                    'apt_device_pass' => $this->radompassWord()
                );
                $partner = $this->Partners->newEntity();
                $partner = $this->Partners->patchEntity($partner, $data_new_par);
                if (empty($users->errors())) {
                    $result = $this->Users->save($users);
                    if ($result) {
                        $device->user_id = $result->id;
                        if (empty($device->errors())) {
                            $data_device = $this->Devices->save($device);
                            if ($data_device) {
                                $partner->device_id = $data_device->id;
                                if (empty($partner->errors())) {
                                    if ($this->Partners->save($partner)) {
                                        $conn->commit();
                                        $this->redirect(['plugin' => null, 'controller' => 'Devices', 'action' => 'view_qc' . '/' . $data_device->id]);
                                    }
                                }
                            } else {
                                $conn->rollback();
                            }
                        } else {
                            $conn->rollback();
                        }
                    } else {
                        $conn->rollback();
                    }
                }
            }
        } else {
            $conn->rollback();
        }
    }
}
