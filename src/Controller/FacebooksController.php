<?php
namespace App\Controller;

use Datetime;
use Cake\Utility\Hash;
use App\Model\Entity\User;
use App\Controller\AppController;

/**
 * Facebooks Controller
 *
 * @property \App\Model\Table\FacebooksTable $Facebooks
 * @property \App\Model\Table\PartnersTable $Partners
 * @property \App\Model\Table\DevicesTable $Devices
 */
class FacebooksController extends AppController
{
    public function initialize()
    {
        $this->loadModel('Partners');
        $this->loadModel('Devices');
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * Index method
     *
     * @return void
     */
    public function index()
    {
        $limit_value = 10;
        $user = $this->Auth->user();
        $day_before_ten_day = date('Y-m-d', strtotime('-10 days'));
        $current = date('Y-m-d');
        $get_date = $day_before_ten_day.' to '. $current;
        $list_day = $this->get_label(array($day_before_ten_day, $current));
        $data_get = array();
        $conditions = array();
        if (isset($_GET) && $_GET != '') {
            $data_get = $_GET;
        }
        if (isset($data_get['date']) && $data_get['date'] != '') {
            $date = explode(' to ', $data_get['date']);
            $date_form = $date[0];
            $date_to = $date[1];
            $flag_date_to = $this->verifyDate($date_to);
            $flag_date_form = $this->verifyDate($date_form);
            if ($flag_date_to) {
                $date_to = Datetime::createFromFormat('Y-m-d', $date_to)->format('Y-m-d');
                $conditions['Partners.created <='] = $date_to;
            }
            if ($flag_date_form) {
                $date_form = Datetime::createFromFormat('Y-m-d', $date_form)->format('Y-m-d');
                $conditions['Partners.created >='] = $date_form;
            }
            $list_day = $this->get_label($date);
            $data_get['date'] = $date_form.' to '. $date_to;
        }
        if (isset($data_get['name']) && $data_get['name'] != '') {
            $conditions['Partners.name LIKE'] = "%".trim($data_get['name'])."%";
        }
        if (isset($data_get['phone']) && $data_get['phone'] != '') {
            $conditions['Partners.phone'] = trim($data_get['phone']);
        }
        if (isset($data_get['device_name']) && $data_get['device_name'] != '') {
            $conditions['Devices.name LIKE'] = "%".trim($data_get['device_name'])."%";
        }
        if (isset($data_get['client_mac']) && $data_get['client_mac'] != '') {
            $conditions['Partners.client_mac LIKE'] = "%".trim($data_get['client_mac'])."%";
        }
        $conditions['Partners.flag_face !='] = 0;
        $conditions['Devices.delete_flag !='] = DELETED;
        if ($user['role'] == User::ROLE_ONE) {
            $query = $this->Partners->getOders($conditions);
        } else {
            $device = $this->Devices->find()->where(['user_id' => $user['id'], 'Devices.delete_flag !=' => 1])->select(['id'])->combine('id', 'id')->toArray();
            if (!empty($device)) {
                $conditions['device_id IN'] = $device;
                $query = $this->Partners->getOders($conditions);
            }
        }
        $data = array();
        $total_partner = count($query->toArray());
        foreach ($query->toArray() as $k => $vl) {
            $vl['created'] = date('Y-m-d', strtotime($vl['created']));
            $data[$k] = $vl;
        }
        $count_old_partner = array();
        $count_new_partner = array();
        $chart_number_partner = array();
        $count_phone_partner = array();
        $count_email_partner = array();
        $list_id_partner_email = array();
        $list_id_partner = array();
        if (!empty($data)) {
            $partner_email = Hash::combine($data, '{n}.id', '{n}.email', '{n}.created');
            foreach ($partner_email as  $k => $partner) {
                $phone_email = array();
                $id_partner = array();
                foreach ($partner as $key => $val) {
                    if ($val != '' || $val != 0) {
                        $phone_email[] = $val;
                        $id_partner[] = $key;
                    }
                }
                $count_email_partner[] = count($phone_email);
                $list_id_partner_email[] = $id_partner;
            }
            $list_id_partner_email = call_user_func_array('array_merge', $list_id_partner_email);
            $partner_phone = Hash::combine($data, '{n}.id', '{n}.phone', '{n}.created');
            foreach ($partner_phone as  $k => $partner) {
                $phone_partner = array();
                $id_partner = array();
                foreach ($partner as $key => $val) {
                    if ($val != '') {
                        $phone_partner[] = $val;
                        $id_partner[] = $key;
                    }
                }
                $count_phone_partner[] = count($phone_partner);
                $list_id_partner[] = $id_partner;
            }
            $list_id_partner = call_user_func_array('array_merge', $list_id_partner);
            $partners = Hash::combine($data, '{n}.id', '{n}.num_clients_connect', '{n}.created');

            foreach ($partners as  $k => $partner) {
                $chart_number_partner[] = count($partner);
                $old_partner = array();
                $new_partner = array();
                foreach ($partner as $key => $val) {
                    if ($val > 1) {
                        $old_partner[] = $val;
                    } else {
                        $new_partner[] = $val;
                    }
                }
                $count_old_partner[] = count($old_partner);
                $count_new_partner[] = count($new_partner);
            }
        }
        $sum_old_partner        = array_sum($count_old_partner);
        $sum_new_partner        = array_sum($count_new_partner);
        $sum_phone_partner      = array_sum($count_phone_partner);
        $sum_email_partner      = array_sum($count_email_partner);
        $count_old_partner      = json_encode($count_old_partner);
        $list_id_partner        = json_encode($list_id_partner);
        $list_id_partner_email  = json_encode($list_id_partner_email);
        $count_new_partner      = json_encode($count_new_partner);
        $count_phone_partner    = json_encode($count_phone_partner);
        $count_email_partner    = json_encode($count_email_partner);
        $chart_number_partner   = json_encode($chart_number_partner);
        $partners = $this->paginate($query, ['limit' => $limit_value])->toArray();
        $this->set(compact(
            'partners',
            'get_date',
            'list_day',
            'data_get',
            'total_partner',
            'sum_new_partner',
            'sum_old_partner',
            'list_id_partner',
            'count_old_partner',
            'sum_phone_partner',
            'count_new_partner',
            'count_phone_partner',
            'chart_number_partner',
            'count_email_partner',
            'sum_email_partner',
            'list_id_partner_email'
        ));
        $this->set('_serialize', ['partners']);
    }

    /**
     * *******************************************
     * @param array $date
     * @return string
     *
     * * *******************************************
     */
    public function get_label ($date = array())
    {
        if ($this->verifyDate($date[0])) {
            $begin = Datetime::createFromFormat('Y-m-d', $date[0])->format('Y-m-d');
        } else {
            $begin = date('Y-m-d', strtotime('-10 days'));
        }
        if ($this->verifyDate($date[1])) {
            $end = Datetime::createFromFormat('Y-m-d', $date[1])->format('Y-m-d');
        } else {
            $end = date('Y-m-d');
        }
        $begin = new DateTime( $begin );
        $end   = new DateTime( $end );
        $list_day = [];
        for($i = $begin; $i <= $end; $i->modify('+1 day')){
            $list_day[] = $i->format("d/m/Y");
        }
        $count = count($list_day);
        end($list_day);         // move the internal pointer to the end of the array
        $last_key = key($list_day);  // fetches the key of the element pointed to by the internal pointer
        reset($list_day);
        $first_key = key($list_day);
        $check_list = array($first_key, $last_key);
        if ($count > 7) {
            foreach ($list_day as $k => $vl) {
                if (!in_array($k, $check_list)) {
                    $vl = '';
                }
                $list_day[$k] = $vl;
            }
        }
        return json_encode($list_day);
    }
}
